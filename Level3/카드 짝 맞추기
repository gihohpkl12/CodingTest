import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Queue;
import java.util.LinkedList;

class Solution {
   Queue<ArrayList<Integer>> caseQ;
    public int solution(int[][] board, int r, int c) {
        int answer = Integer.MAX_VALUE;
        HashMap<Integer, int[]> cardMap = new HashMap<>();
        caseQ = new LinkedList<>();
        
        int[] cardNumArr;
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                int key = board[i][j];
                if(key != 0) {
                    if(!cardMap.containsKey(key)) {
                        int[] position = new int[4];
                        position[0] = i;
                        position[1] = j;
                        cardMap.put(key, position);
                    } else {
                        int[] position = cardMap.get(key);
                        position[2] = i;
                        position[3] = j;
                        cardMap.replace(key, position);
                    }
                }
            }
        }
        
        int index = 0;
        cardNumArr = new int[cardMap.size()];
        for(int cardNum : cardMap.keySet()) {
            cardNumArr[index] = cardNum;
            index++;
        }
         
       com(cardNumArr, new ArrayList<Integer>(), cardNumArr.length);

       while(caseQ.size() != 0) {
    	   int min = Integer.MAX_VALUE;
    	   ArrayList<Integer> orderList = caseQ.poll();
    	   Queue<Card> cardQ = new LinkedList<>();
    	   cardQ.add(new Card(r, c, 0));
    	   
    	   int[][] boardCopy = new int[4][4];
    	   for(int i = 0; i < board.length; i++) {
    		   boardCopy[i] = (int[])board[i].clone();
    	   }
    	   
    	   for(int i = 0; i < orderList.size(); i++) {
    		   int[] position = cardMap.get(orderList.get(i));
    		   int end = cardQ.size();
    		   
    		   for(int j = 0; j < end; j++) {
    			   Card card = cardQ.poll();
    			   
    			   int firstResult = calDis(boardCopy, card.x, card.y, position[0], position[1]);
    			   firstResult += calDis(boardCopy, position[0], position[1], position[2], position[3]);
    			   
    			   int secondResult = calDis(boardCopy, card.x, card.y, position[2], position[3]);
    			   secondResult += calDis(boardCopy, position[2], position[3], position[0], position[1]);
    			   
    			   if(i == orderList.size()-1) {
    				   min = card.moved+firstResult < min ? card.moved+firstResult : min;
    				   min = card.moved+secondResult < min ? card.moved+secondResult : min; 
    			   } else {
                       if(card.moved+firstResult < answer) {
                           cardQ.add(new Card(position[2], position[3], card.moved+firstResult));    
                       }
    				   if(card.moved+secondResult < answer) {
                           cardQ.add(new Card(position[0], position[1], card.moved+secondResult));    
                       }
    			   }
    		   }
    		   boardCopy[position[0]][position[1]] = 0;
               boardCopy[position[2]][position[3]] = 0;
    	   }
    	   answer = min < answer ? min : answer;
       }
       
       return answer + cardMap.size()*2;
    }
    
    public int calDis(int[][] board, int startX, int startY, int targetX, int targetY) {
    	if(targetX == startX && targetY == startY) {
    		return 0;
    	}
    	int[][] moveDirection = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    	int[][] moveDis = new int[4][4];
    	
    	Queue<int[]> positionQ = new LinkedList<>();
    	positionQ.add(new int[] {startX, startY});
    	
    	while(positionQ.size() !=0) {
    		int[] curPosition = positionQ.poll();
    		for(int[] dir : moveDirection) {
    			int x = curPosition[0], y = curPosition[1];

    			if(x + dir[0] >= 0 && x + dir[0] < 4 && y + dir[1] >= 0 && y + dir[1] < 4) {
    				if(moveDis[x + dir[0]][y + dir[1]] == 0 || moveDis[x + dir[0]][y + dir[1]] > moveDis[curPosition[0]][curPosition[1]] +1) {
    					moveDis[x + dir[0]][y + dir[1]] = moveDis[curPosition[0]][curPosition[1]] +1;
    					positionQ.add(new int[] {x + dir[0], y + dir[1]});
    				}
    			}
    			
    			while(x + dir[0] >= 0 && x + dir[0] < 4 && y + dir[1] >= 0 && y + dir[1] < 4) {
    				x += dir[0];
    				y += dir[1];
    				
    				if(board[x][y] != 0) {
    					break;
    				}
    			}
    			if(moveDis[x][y] == 0 || moveDis[x][y] > moveDis[curPosition[0]][curPosition[1]] +1) {
    				if(x != curPosition[0] || y != curPosition[1]) {
        				moveDis[x][y] = moveDis[curPosition[0]][curPosition[1]] +1;
        				positionQ.add(new int[] {x, y});
    				}
				}
    		}
    	}
    	return moveDis[targetX][targetY];
    }

    public void com(int[] cardNumArr, ArrayList<Integer>caseListt, int end) {
        if(caseListt.size() == end) {
            ArrayList<Integer> saveList = (ArrayList<Integer>)caseListt.clone();
            caseQ.add(saveList);
            return;
        }
        
        for(int i = 0; i < cardNumArr.length; i++) {
            if(cardNumArr[i] != -1) {
                caseListt.add(cardNumArr[i]);
                cardNumArr[i] = -1;
                com(cardNumArr, caseListt, end);
                cardNumArr[i] = caseListt.get(caseListt.size()-1);
                caseListt.remove(caseListt.size()-1);
            }
        }
    }
    
    class Card {
        int x, y, moved;
        public Card(int x, int y, int moved) {
        	this.x = x;
        	this.y = y;
        	this.moved = moved;
        }
    }
}

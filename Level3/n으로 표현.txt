import java.util.HashMap;

/*
DP라는데, DP인줄 몰랐던 문제.
경우의 수로 분류하는 게 더 맞는 듯.
전형적인 경우의 수 문제로, 경우의 수를 빨리 파악하는 게 중요함.
i = 4일 때, 생성되는 경우의 수는
3개에서 1개씩 사칙연산만 하면 되는 게 아님.
1 & 3
2 & 2
3 & 1
그리고 /나 -의 경우에는 순서에 따라 값이 바뀜을 알아야 함
*/
class Solution {
    public int solution(int N, int number) {
        int answer = -1, increseNum = 1, nn = N;
        HashMap<Integer, Integer>[] cases = new HashMap[9];
        
        for(int i = 1; i < cases.length; i++) {
            cases[i] = new HashMap<>();
            cases[i].put(nn, 0);
            increseNum *= 10;
            nn += increseNum * N;
        }
        
        for(int i = 1; i < cases.length; i++) {
            for(int j = 1; j <= i/2; j++) {
                for(int first : cases[j].keySet()) {
                    for(int second : cases[i-j].keySet()) {
                        cases[i].put(first+second, 0);
                        cases[i].put(first*second, 0);
                        
                        if(first - second > 0) {
                            cases[i].put(first - second, 0);
                        }
                        if(first / second > 0) {
                            cases[i].put(first / second, 0);
                        }
                        if(second / first > 0) {
                            cases[i].put(second / first, 0);
                        }
                        
                        if(second - first > 0) {
                            cases[i].put(second - first, 0);
                        }
                    }
                }
            }
            if(cases[i].containsKey(number)) {
                answer = i;
                break;
            }
        }
        
        return answer;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------
import java.util.HashMap;
class Solution {
    HashMap<Integer, Integer> list;
    public int solution(int N, int number) {
        int answer = -1;
        list = new HashMap<>();
        String N_temp = Integer.toString(N)+Integer.toString(N);
        init(N,N_temp);
        N_temp += Integer.toString(N);
        for(int i =3; i<=8; i++)
        {
            int[][] temp_list = new int[list.size()][2];
            int index = 0;
            for(int key : list.keySet())
            {
                temp_list[index][0] =key;
                temp_list[index][1] =list.get(key);
                index++;
            }
            for(int j = 0; j<temp_list.length; j++)
            {
                int temp_N = temp_list[j][0];
                int temp_count = temp_list[j][1];
                for(int k=0; k<temp_list.length; k++)
                {
                    if(temp_count+temp_list[k][1]>8) continue;
                    int key = temp_N*temp_list[k][0];
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);

                    key = temp_N+temp_list[k][0];
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);

                    key = temp_N-temp_list[k][0];
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);

                    key = temp_list[k][0]-temp_N;
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);

                    if(temp_N==0) continue;
                    key = temp_list[k][0]/temp_N;
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);

                    if(temp_list[k][0]==0) continue;
                    key = temp_N/temp_list[k][0];
                    if(list.containsKey(key))
                    {
                        int count = list.get(key);
                        count = count < temp_list[k][1]+temp_count ? count : temp_list[k][1]+temp_count;
                        list.replace(key, count);
                    }
                    else
                        list.put(key, temp_count+temp_list[k][1]);
                }
            }
            list.put(Integer.parseInt(N_temp),i);
            N_temp += Integer.toString(N);
        }
        if(list.containsKey(number)) answer = list.get(number);
        return answer;
    }
    public void init(int N, String N_temp)
    {
        list.put(N*N,2);
        list.put(N+N,2);
        list.put(N-N,2);
        list.put(N/N,2);
        list.put(N,1);
        list.put(Integer.parseInt(N_temp),2);
    }

}

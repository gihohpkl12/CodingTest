/*
점수를 못 받는 사원 때문에 오히려 오래걸린 문제.
어렵게 생각하지 말고 간단하게 생각하면 됨.

우선 앞에 점수를 기준으로 정렬함.(내림차순)
앞의 점수가 같으면 두번째 점수를 기준으로 정렬함(내림차순)

예시를 기준으로 
3,2 3,2 2,2 2,1 1,4가 될텐데
여기서 맨 앞의 처음 점수(3)과 같은 애들은 탈락 걱정이 없음.
왜냐면 하나라도 최대이기 때문에.

그럼 탈락자는 어디부터 나오냐?
3이 아닌 순간부터 나옴.

다음으로 중요한 게 두번째 점수도 중요함.
왜냐?
3이 아닌 순간 애들은 탈락 가능성이 생김. 
(3보다 작으니까.)
그래서 3인 애들 중에서 두번째 점수가 제일 높은 애를 ArrayList에 저장함.

2인애들 부터는 첫번째 점수가 3인 애들 그룹 중에서 두번째 값이 제일 큰애를 기준으로 비교하면 되는 거임.
그럼 탈락이니까.

이거를 확장하면
앞자리가 같은 애들을 그룹으로 묶고, 걔들 중 두번째 값이 최대인 값을 구해서 그걸 list에 저장함.

또 하나 중요한 게
원호임.
원호보다 통합 점수가 낮은 애들은 신경을 쓸 필요가 없음.
왜냐면 등수에 영향이 없음.
원호보다 같거나, 큰 애들은 신경써야 함.
정확하게 말하면 원호보다 큰 애들은 무조건 체크를 해야 함.
얘네가 만약에 탈락 대상이면 원호의 등수가 바뀜.
(+ 원호 역시 탈락할 가능성이 생김으로 원호랑 비교도 해야 함)

원호랑 같은 애들은 등수랑 상관이 없는데
원호도 탈락하는지 아닌지 체크하기 위해 따져야 함.

그리고 전체 max 점수도 따져야 함.
만약에 원호가 전체 max 점수랑 같다면 앞에 count가 몇이든 그냥 1등임.
다르면 count로 하면 됨.
*/
import java.util.Arrays;
import java.util.ArrayList;

class Solution {
    public int solution(int[][] scores) {
        int first = scores[0][0];
        int second = scores[0][1];
        int total = first + second;
        
        // 첫번째 점수를 기준으로 내림차순 정렬 & 같으면 두번째 점수를 기준으로 내림차순 정렬
        Arrays.sort(scores, (a, b) -> a[0] == b[0] ? b[1] - a[1] : b[0] - a[0]);

        // 시작전에 first, second 값 셋팅.
        int firstScoreStandard = scores[0][0];
        int secondScoreStandard = scores[0][1];
        // 전체 최대값.
        int maxTotal = 0;
        // 원호 앞에 있는 애들 숫자.
        int count = 1;
        ArrayList<int[]> maxScoreList = new ArrayList<>();

        for (int[] score : scores) {
            int curFirst = score[0];
            int curSecond = score[1];
            int curTotal = curFirst + curSecond;
            
            // 앞자리 점수가 바뀌면 이제 list에 저장할 때가 된 것.
            // 이 값은 앞자리, 앞자리 그룹중 최대 두번째 값.
            if(firstScoreStandard != curFirst) {
                maxScoreList.add(new int[] {firstScoreStandard, secondScoreStandard});
                // 저장 후에 바뀐 앞자리로 셋팅.
                firstScoreStandard = curFirst;
                secondScoreStandard = curSecond;
            } else {
                // 앞자리가 동일할 때는 해당 앞자리 그룹 중 두번째 값이 최대인 수를 구해야 함.
                secondScoreStandard = Math.max(secondScoreStandard, curSecond);
            }
            
            // 원호보다 낮은 애들은 필요가 없음.
            if(curTotal < total) {
                continue;
            } else if(curTotal >= total) {
                // 탈락 대상.
                if(check(maxScoreList, curFirst, curSecond)) {
                    // 원호가 탈락 대상의 점수보다 같거나 작으면 원호도 탈락임.
                    if(curFirst >= first && curSecond >= second) {
                        return -1;
                    }
                    continue;
                }
                
                // 원호랑 동점이면 등수랑 상관이 없음으로 비교.
                count = curTotal > total ? count+1 : count;
            }   
        }
        
        return total == maxTotal ? 1 : count;
    }
    
    public boolean check(ArrayList<int[]> maxScoreList, int first, int second) {
        for(int[] arr : maxScoreList) {
            if(arr[0] <= first) {
                break;
            }
            
            if(arr[0] > first && arr[1] > second) {
                return true;
            }
        }
        
        return false;
    }
}

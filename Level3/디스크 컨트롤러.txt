import java.util.Comparator;
import java.util.ArrayList;
import java.util.Collections;
/*
시간 관련 계산을 빨리 파악하는 게 중요한 문제
정답에는 일을 못 해서 대기하고 있는 시간이 없어야 함.
(순수하게 대기 시간만 계산)
근데 그 시간을 계산하는 기준은 일을 못 한 전체 시간을 기준으로 함.
그리고 일을 최소한으로 할 기준은 요청 시간이 짧은 일을 우선으로 해야 함.
그래서 일단 작업 시간을 기준으로 정렬하고,
만약에 현재 시간을 기준으로 작업을 못하면 먼저 들어온 애를 처리함.
*/

class Solution {
    public int solution(int[][] jobs) {
        int answer = 0;
        JobHandler jobHandler = new JobHandler();
        jobHandler.jobSetting(jobs);
        jobHandler.sort();
        
        while(jobHandler.jobs.size() != 0) {
            // 작업한 시간을 계산함.
            answer += jobHandler.getJob();
        }
        
        return answer/jobs.length;
    }
    
    // 작업 자체를 다루는 클래스
    class JobHandler {
        ArrayList<int[]> jobs = new ArrayList<>();
        int curTime = 0;
        
        // 작업 목록 저장
        public void jobSetting(int[][] job) {
            for(int i = 0; i < job.length; i++) {
                this.jobs.add(job[i]);
            }
        }
        
        // 정렬함.
        public void sort() {
            Collections.sort(jobs, new Comparator<int[]>(){
                public int compare(int[] o1, int[] o2) {
                    if(o1[1] - o2[1] != 0) {
                        return o1[1] - o2[1];
                    }
                    return o1[0] - o2[0];
                }
            });
        }
        
        // 가장 먼저 들어온 요청을 처리함.
        // curTime이 무조건 먼저 들어온 시간보다 작기 때문에 해당 시간으로 초기화를 해줘야 함.
        public int getEarlyCommingJob() {
            int min = Integer.MAX_VALUE, index = 0, result;
            
            for(int i = 0; i < jobs.size(); i++) {
                if(min > jobs.get(i)[0]) {
                    min = jobs.get(i)[0];
                    index = i;
                }
            }
            this.curTime = jobs.get(index)[0];
            result = this.curTime + jobs.get(index)[1] - jobs.get(index)[0];
            this.curTime += jobs.get(index)[1];
            this.jobs.remove(index);
            return result;
        }
        
        // 작업을 가져옴.
        // 만약에 현재 일을 할 수 있는 작업이 없으면 가장 먼저 온 요청을 처리하는 함수 호출
        public int getJob() {
            int result = 0;
            for(int i = 0; i < this.jobs.size(); i++) {
                if(this.jobs.get(i)[0] <= curTime) {
                    result = this.curTime + jobs.get(i)[1] - jobs.get(i)[0];
                    this.curTime += jobs.get(i)[1];
                    this.jobs.remove(i);
                    return result;
                }    
            }
            return getEarlyCommingJob();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;

class Solution {
    public int solution(int[][] jobs) {
        int answer = 0, curTime = 0;
        PriorityQueue<Job> jobQ = new PriorityQueue<>(new Comparator<Job>(){
            public int compare(Job o1, Job o2) {
                if(o1.workTime - o2.workTime != 0) {
                    return o1.workTime - o2.workTime;
                }
                return o1.inputTime - o2.inputTime;
            }
        });
        
        for(int i = 0; i < jobs.length; i++) {
            jobQ.add(new Job(jobs[i][0], jobs[i][1]));
        }
        
        while(jobQ.size() != 0) {
            ArrayList<Job> backUpJob = new ArrayList<>();
            Job nextJob = null;
            
            while(jobQ.size() > 0) {
                nextJob = jobQ.poll();
		// 할 수 있는 작업 중에 시간이 가장 작은 값.
                if(nextJob.inputTime <= curTime) {
                    break;
                } else {
                    backUpJob.add(nextJob);
                    nextJob = null;
                }
            }
            
            
            if(nextJob != null) {
                // System.out.println("before "+" : "+curTime);
                answer += nextJob.workTime + curTime - nextJob.inputTime;
                curTime += nextJob.workTime;
                
                // System.out.println("while end "+nextJob.inputTime+" "+nextJob.workTime+" curTime "+curTime+" answer "+answer);
            } else {
                // System.out.println("non "+" curTime "+curTime+" answer "+answer);
		// 지금 기준으로 할 수 있는 작업이 없어서 curTime을 늘림.
                curTime++;
            }
            
            for(int i = 0; i < backUpJob.size(); i++) {
                jobQ.add(backUpJob.get(i));
            }
        }
        return answer/jobs.length;
    }
    class Job {
        int inputTime;
        int workTime;
        
        public Job(int inputTime, int workTime) {
            this.inputTime = inputTime;
            this.workTime = workTime;
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Arrays;

class Solution {
    public int solution(int[][] jobs) {
        PriorityQueue<Integer> Q = new PriorityQueue<>();
        int answer = 0, timeCheck = 0, jobIndex = 0, currentWork = 0, endCount = jobs.length+1;
        
        Arrays.sort(jobs, new Comparator<int[]>() {
            public int compare(int[] o1, int[] o2) {
               return o1[0] - o2[0];
            }
        });
        
        while(endCount > 0) {
           if(jobIndex < jobs.length) {
               while(jobIndex < jobs.length && jobs[jobIndex][0] <= timeCheck) {
                   Q.add(jobs[jobIndex][1]);
                   answer -= jobs[jobIndex][0];
                   jobIndex++;
               }
           }
            if(currentWork == 0) {
                if(Q.size() != 0) {
                    currentWork = Q.poll();
                }                
                endCount--;
                answer += timeCheck;
            } else if(currentWork < 0) {
                if(Q.size() != 0) {
                    currentWork = Q.poll();
                }                
            }
            timeCheck++;
            currentWork--;
        }
        
        return answer/jobs.length;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.PriorityQueue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
class Solution {
   public int solution(int[][] jobs) {
	        int answer = 0, end = jobs.length;
	        PriorityQueue<Integer> q = new PriorityQueue<>();
	        ArrayList<Integer> time = new ArrayList<>();
	        Arrays.sort(jobs, new Comparator<int[]>() 
	        {
	        	public int compare(int[] o1, int[] o2)
	        	{
	        		return o1[0]-o2[0];
	        	}
	        });
	        int index =0;
	        int current = 0; 
	        while(end != 0)
	        {
	        	while(index < jobs.length)
	        	{
	        		if(jobs[index][0]<=answer)
	        		{
	        			q.offer(jobs[index][1]);
	        			index++;
	        		}else
	        			break;
	        	}
	            if(current ==0)
	            {
	                if(q.size()!=0)
	                	current = q.poll();
	                else
	                {
	                    answer++;
	                    continue;
	                }
	            }
	        	answer++;
	        	current--;
	        	if(current==0)
	        	{
	        		end--;
	        		time.add(answer);
	        	}
	        }
	        answer =0;
	        for(int i : time)
	        	answer +=i;
	        for(int[] i : jobs)
	        	answer -= i[0];
	        return answer/jobs.length;
	    }
}

import java.util.ArrayList;
import java.util.HashMap;

class Solution {
    ArrayList<ArrayList<String>> total_list;
	 public int solution(String[] user_id, String[] banned_id) {
	        int answer = 1;
	        ArrayList<ArrayList<String>> list = new ArrayList<>();
	        HashMap<String, String> map = new HashMap<>();
	        total_list = new ArrayList<>();
	        
	        for(int i =0; i<banned_id.length; i++)
	        {
	        	String id = banned_id[i];
	        	ArrayList<String> temp = new ArrayList<>();
	        	for(int j = 0; j< user_id.length; j++)
	        	{
	        		if(user_id[j].length()!= id.length())
	        			continue;
	        		else
	        		{
	        			if(check(id, user_id[j]))
	        				temp.add(user_id[j]);
	        		}
	        	}
	        	list.add(temp);
	        }
	        ArrayList<String> temp = new ArrayList<>();
	        
	        count(list,temp,0,map);
	        remove(total_list);
	        
	        answer = total_list.size();
	        return answer;
	    }
	 public boolean check(String o1, String o2)
	 {
		 boolean result = true;
		 for(int i =0; i< o1.length(); i++)
		 {
			 if(o1.charAt(i)=='*')
				 continue;
			 else if(o1.charAt(i)!=o2.charAt(i))
			 {
				 result = false;
				 break;
			 }
		 }
		 return result;
	 }
	 public void count(ArrayList<ArrayList<String>> list,ArrayList<String> save, int index, HashMap<String,String> map2)
	 {
		 if(index==list.size())
		 {
			 total_list.add(save);
			 return;
		 }
		 
		 for(int i =0; i< list.get(index).size(); i++)
		 {
			 HashMap<String, String> temp_map = (HashMap)map2.clone();
			 ArrayList<String> temp_save = (ArrayList<String>)save.clone();
			 String temp_str = list.get(index).get(i);
			 if(temp_map.containsKey(temp_str))
				 continue;
			 else
			 {
				 temp_map.put(temp_str, "");
				 temp_save.add(temp_str);
				 count(list, temp_save, index+1, temp_map);
			 }
		 }
		 
	 }
	 
	 public void remove(ArrayList<ArrayList<String>> list)
	 {
		 int index =0;
		 while(index<list.size())
		 {
			 ArrayList<Integer> remove_list = new ArrayList<>();
			 for(int i = index+1; i<list.size(); i++)
			 {
				 int count =0;
				 for(String a : list.get(index))
				 {
					 
					 if(list.get(i).contains(a))
						 count++;
					 else
						 break;
				 }
				 if(count==list.get(index).size())
					 remove_list.add(i);
			 }
			 if(remove_list.size()!=0)
			 {
				 for(int j =0; j<remove_list.size();j++)
				 {
					 int key = remove_list.get(j)-j;
					 list.remove(key);
				 }
			 }
			 index++;
		 }

	 }
}

-----------------------------------------------------------------------------------------------------------------------------
/*
노드로 트리구조 형식으로 해보려고 했는데
스택 오버플로우 나는 듯
*/

import java.util.HashMap;

class Solution {
    public int solution(String[] user_id, String[] banned_id) {
        int answer = 1;
        HashMap<Character, Node> nodeManage = new HashMap<>();
        HashMap<String, String> bannedManage = new HashMap<>();
        // nodeManage.put('f', new Node());
        // nodeSetting("frodo", 1, nodeManage.get('f'));
        
        for(int i = 0; i < user_id.length; i++) {
            String key = user_id[i];
            if(nodeManage.containsKey(key.charAt(0))) {
                nodeSetting(key, 1, nodeManage.get(key.charAt(0)));
            } else {
                nodeManage.put(key.charAt(0), new Node());
                nodeSetting(key, 1, nodeManage.get(key.charAt(0)));
            }
        }
        
        for(String banned : banned_id) {
            int result = 0;
            if(bannedManage.containsKey(banned)) {
                continue;
            } else {
                bannedManage.put(banned, "");
            }
            
            if(banned.charAt(0) == '*') {
                for(char next : nodeManage.keySet()) {
                    result += search(nodeManage.get(next), banned, 1);
                }
            } else {
                if(nodeManage.containsKey(banned.charAt(0))) {
                    result += search(nodeManage.get(banned.charAt(0)), banned, 1);
                }
            }
            // System.out.println(banned + " "+result);
            answer *= result;
        }
        // search(nodeManage.get('f'), "frodo", 1);
        
        return answer;
    }
    
    public int search(Node parent, String key, int index) {
        int result = 0;
        // System.out.println("start "+result +" ? "+key +" in "+index);
        if(index == key.length() -1) {
            // System.out.println("????? "+key +" in "+index+" ch "+key.charAt(index));
            if(key.charAt(index) == '*') {
                return parent.child.size();
            } else {
                if(parent.child.containsKey(key.charAt(index))) {
                    return 1;
                }
            }
            return 0;
        }
        
        if(key.charAt(index) == '*') {
            for(char next : parent.child.keySet()) {
                result += search(parent.child.get(next), key, index+1);
            }
        } else {
            if(parent.child.containsKey(key.charAt(index))) {
                result += search(parent.child.get(key.charAt(index)), key, index+1);
            }
        }
        
        // System.out.println("end "+result +" ? "+key +" in "+index);
        // System.out.println(parent.child.keySet()+" ? "+key.charAt(index));
        return result;
    }
    
    public void nodeSetting(String key, int index, Node parent) {
        if(index == key.length()) {
            return;
        }
        if(parent.child.containsKey(key.charAt(index))) {
            nodeSetting(key, index+1, parent.child.get(key.charAt(index)));
        } else {
            Node child = new Node();
            parent.child.put(key.charAt(index), child);
            nodeSetting(key, index+1, child);
        }
        // System.out.println(parent.child.keySet()+ " ? "+key.charAt(index)+" in "+index);
    }
    
    class Node {
        HashMap<Character, Node> child;
        
        public Node() {
            child = new HashMap<>();
        }
    }
}

// 참고로 이것보다 아래에 코딩했던 게 속도가 더 빠름..
import java.util.HashMap;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.PriorityQueue;

/*
banned_id 1)의 케이스 : aa, bb, cc
banned_id 2)의 케이스 : aa, dd, ff
라고 하면
1) 자리에는 aa, bb, cc가 올 수 있고, 2)의 자리에는 aa, dd, ff가 올 수 있음.
그냥 aa, bb, cc, dd, ff 중에 2개를 뽑는 경우의 수를 하면 aa, bb 처럼 2) 케이스에 올 수 있는 애가 없기 때문에 안 됨.
++ 1)에 aa가 왔으면 2)에는 aa가 오면 안 됨.

그리고 노드를 만들어서 트리구조처럼 만들어서 하면 스택 오버플로우가 나는 듯.

아 여기서는 userID가지고 모든 케이스를 만들어서 풀었는데 그거 개떡같은 듯 ㅅㅂ 
나중에 바꿔보자

이렇게 Banned 아이디에 해당하는 케이스를 전부 구했으면
DFS로 돌면서 위에서 banned_id 마다 나온 케이스들을 가지고 전체 경우의 수를 만듦.
ex.
aa dd
cc ff 이런 식.
이걸 PriorityQueue에 저장하고, 마지막에 그걸 String으로 변환해서 answerCheckMap에 저장하면서 중복인 경우들을 걸러냄.
(PriorityQueue로 하면 자동으로 정렬이 되기 때문에 String으로 변환해서 중복을 걸러낼 때 좋음)
*/
class Solution {
    public int solution(String[] user_id, String[] banned_id) {
        int answer = 0;
        // user_id로 만들 수 있는 모든 경우의 수를 저장하는 맵
        HashMap<String, ArrayList<String>> caseSaveMap = new HashMap<>();
        // banned_id 배열에서 해당되는 케이스들을 저장하는 맵
        HashMap<Integer, ArrayList<String>> bannedIdMap = new HashMap<>();

        for(String key : user_id) {
            makingAllCase(caseSaveMap, key);
        }
        
        // 위치를 따지기 위해서 index. (위치는 위에서 "banned_id 1)의 케이스" 라고 설명한 개념임)
        int index = 0;
        for(int i = 0; i < banned_id.length; i++) {
            String key = banned_id[i];
            if(caseSaveMap.containsKey(key)) {
                bannedIdMap.put(index++, caseSaveMap.get(key));
            }   
        }
        
        // 정답이 될 가능성이 있는 케이스들을 저장하는 리스트.
        ArrayList<PriorityQueue<String>> answerList = new ArrayList<>();
        makingAnswerCase(answerList, bannedIdMap, new HashMap<>(), 0);
        
        // 정답 체크
        HashMap<String, String> answerCheckMap = new HashMap<>();
        for(int i = 0; i < answerList.size(); i++) {
            StringBuilder answerId = new StringBuilder();
            
            while(answerList.get(i).size() != 0) {
                answerId.append(answerList.get(i).poll());
                answerId.append(",");
            }
            
            if(!answerCheckMap.containsKey(answerId.toString())) {
                answerCheckMap.put(answerId.toString(), "");
            }
        }
        
        return answerCheckMap.size();
    }
    
    // 정답이 될 수 있는 모든 케이스를 저장함. 위에서 말한 banned_id에 해당되는 케이스들 중에 중복이 있기 때문에 makingCase를 HashMap으로 함.
    public void makingAnswerCase(ArrayList<PriorityQueue<String>> answerList, HashMap<Integer, ArrayList<String>> bannedIdMap, HashMap<String, String> makingCase, int cur) {
        if(bannedIdMap.size() == cur && makingCase.size() == bannedIdMap.size()) {
            // 자동 정렬
            PriorityQueue<String> saveQ = new PriorityQueue<>();
            for(String key : makingCase.keySet()) {
                saveQ.add(key);
            }
            answerList.add(saveQ);
            return;
        }
        
        for(int i = 0; i < bannedIdMap.get(cur).size(); i++) {
            String key = bannedIdMap.get(cur).get(i);
            
            // 중복이 되는 케이스인지 아닌지 체크함.
            if(!makingCase.containsKey(key)) {
                String curId = bannedIdMap.get(cur).get(i);
                bannedIdMap.get(cur).remove(i);
                makingCase.put(curId, "");
                makingAnswerCase(answerList, bannedIdMap, makingCase, cur+1);
                bannedIdMap.get(cur).add(i, curId);
                makingCase.remove(curId);
            }
        }
    }
    
    // user_id로 만들 수 있는 모든 케이스를 생성함.
    public void makingAllCase(HashMap<String, ArrayList<String>> saveMap, String id) {
        Queue<String> caseQ = new LinkedList<>();
        caseQ.add("");
        for(int i = 0; i < id.length(); i++) {
            int end = caseQ.size();
            
            for(int j = 0; j < end; j++) {
                String cur = caseQ.poll();
                caseQ.add(cur+String.valueOf(id.charAt(i)));
                caseQ.add(cur+"*");
            }
        }
        while(caseQ.size() != 0) {
            String key = caseQ.poll();
            if(saveMap.containsKey(key)) {
                saveMap.get(key).add(id);
            } else {
                saveMap.put(key, new ArrayList<String>());    
                saveMap.get(key).add(id);
            }
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.HashMap;

class Solution {
    ArrayList<ArrayList<String>> total_list;
	 public int solution(String[] user_id, String[] banned_id) {
	        int answer = 1;
	        ArrayList<ArrayList<String>> list = new ArrayList<>();
	        HashMap<String, String> map = new HashMap<>();
	        total_list = new ArrayList<>();
	        
	        for(int i =0; i<banned_id.length; i++)
	        {
	        	String id = banned_id[i];
	        	ArrayList<String> temp = new ArrayList<>();
	        	for(int j = 0; j< user_id.length; j++)
	        	{
	        		if(user_id[j].length()!= id.length())
	        			continue;
	        		else
	        		{
	        			if(check(id, user_id[j]))
	        				temp.add(user_id[j]);
	        		}
	        	}
	        	list.add(temp);
	        }
	        ArrayList<String> temp = new ArrayList<>();
	        
	        count(list,temp,0,map);
	        remove(total_list);
	        
	        answer = total_list.size();
	        return answer;
	    }
	 public boolean check(String o1, String o2)
	 {
		 boolean result = true;
		 for(int i =0; i< o1.length(); i++)
		 {
			 if(o1.charAt(i)=='*')
				 continue;
			 else if(o1.charAt(i)!=o2.charAt(i))
			 {
				 result = false;
				 break;
			 }
		 }
		 return result;
	 }
	 public void count(ArrayList<ArrayList<String>> list,ArrayList<String> save, int index, HashMap<String,String> map2)
	 {
		 if(index==list.size())
		 {
			 total_list.add(save);
			 return;
		 }
		 
		 for(int i =0; i< list.get(index).size(); i++)
		 {
			 HashMap<String, String> temp_map = (HashMap)map2.clone();
			 ArrayList<String> temp_save = (ArrayList<String>)save.clone();
			 String temp_str = list.get(index).get(i);
			 if(temp_map.containsKey(temp_str))
				 continue;
			 else
			 {
				 temp_map.put(temp_str, "");
				 temp_save.add(temp_str);
				 count(list, temp_save, index+1, temp_map);
			 }
		 }
		 
	 }
	 
	 public void remove(ArrayList<ArrayList<String>> list)
	 {
		 int index =0;
		 while(index<list.size())
		 {
			 ArrayList<Integer> remove_list = new ArrayList<>();
			 for(int i = index+1; i<list.size(); i++)
			 {
				 int count =0;
				 for(String a : list.get(index))
				 {
					 
					 if(list.get(i).contains(a))
						 count++;
					 else
						 break;
				 }
				 if(count==list.get(index).size())
					 remove_list.add(i);
			 }
			 if(remove_list.size()!=0)
			 {
				 for(int j =0; j<remove_list.size();j++)
				 {
					 int key = remove_list.get(j)-j;
					 list.remove(key);
				 }
			 }
			 index++;
		 }

	 }
}

-----------------------------------------------------------------------------------------------------------------------------
/*
노드로 트리구조 형식으로 해보려고 했는데
스택 오버플로우 나는 듯
*/

import java.util.HashMap;

class Solution {
    public int solution(String[] user_id, String[] banned_id) {
        int answer = 1;
        HashMap<Character, Node> nodeManage = new HashMap<>();
        HashMap<String, String> bannedManage = new HashMap<>();
        // nodeManage.put('f', new Node());
        // nodeSetting("frodo", 1, nodeManage.get('f'));
        
        for(int i = 0; i < user_id.length; i++) {
            String key = user_id[i];
            if(nodeManage.containsKey(key.charAt(0))) {
                nodeSetting(key, 1, nodeManage.get(key.charAt(0)));
            } else {
                nodeManage.put(key.charAt(0), new Node());
                nodeSetting(key, 1, nodeManage.get(key.charAt(0)));
            }
        }
        
        for(String banned : banned_id) {
            int result = 0;
            if(bannedManage.containsKey(banned)) {
                continue;
            } else {
                bannedManage.put(banned, "");
            }
            
            if(banned.charAt(0) == '*') {
                for(char next : nodeManage.keySet()) {
                    result += search(nodeManage.get(next), banned, 1);
                }
            } else {
                if(nodeManage.containsKey(banned.charAt(0))) {
                    result += search(nodeManage.get(banned.charAt(0)), banned, 1);
                }
            }
            // System.out.println(banned + " "+result);
            answer *= result;
        }
        // search(nodeManage.get('f'), "frodo", 1);
        
        return answer;
    }
    
    public int search(Node parent, String key, int index) {
        int result = 0;
        // System.out.println("start "+result +" ? "+key +" in "+index);
        if(index == key.length() -1) {
            // System.out.println("????? "+key +" in "+index+" ch "+key.charAt(index));
            if(key.charAt(index) == '*') {
                return parent.child.size();
            } else {
                if(parent.child.containsKey(key.charAt(index))) {
                    return 1;
                }
            }
            return 0;
        }
        
        if(key.charAt(index) == '*') {
            for(char next : parent.child.keySet()) {
                result += search(parent.child.get(next), key, index+1);
            }
        } else {
            if(parent.child.containsKey(key.charAt(index))) {
                result += search(parent.child.get(key.charAt(index)), key, index+1);
            }
        }
        
        // System.out.println("end "+result +" ? "+key +" in "+index);
        // System.out.println(parent.child.keySet()+" ? "+key.charAt(index));
        return result;
    }
    
    public void nodeSetting(String key, int index, Node parent) {
        if(index == key.length()) {
            return;
        }
        if(parent.child.containsKey(key.charAt(index))) {
            nodeSetting(key, index+1, parent.child.get(key.charAt(index)));
        } else {
            Node child = new Node();
            parent.child.put(key.charAt(index), child);
            nodeSetting(key, index+1, child);
        }
        // System.out.println(parent.child.keySet()+ " ? "+key.charAt(index)+" in "+index);
    }
    
    class Node {
        HashMap<Character, Node> child;
        
        public Node() {
            child = new HashMap<>();
        }
    }
}

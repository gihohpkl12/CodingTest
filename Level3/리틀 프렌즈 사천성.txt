import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
class Solution {
    public String solution(int m, int n, String[] board) {
	        String answer = "";
	        HashMap<String, ArrayList<Integer>> map = new HashMap<>();
	        ArrayList<String> tile = new ArrayList<String>();
	        positionMake(board, map);
	        
	        for(String i : map.keySet())
	        	tile.add(i);
	        Collections.sort(tile);
	        
	        for(int i =0; i<tile.size(); i++)
	        {
	        	ArrayList<Integer> temp = map.get(tile.get(i));
	        	if(temp.size()==4 &&routeCheck(temp.get(0), temp.get(1), temp.get(2), temp.get(3), board, tile.get(i)) )
	        	{	        	
	        		answer += tile.get(i);
	        		board[temp.get(0)] = board[temp.get(0)].replace(board[temp.get(0)].substring(temp.get(1), temp.get(1)+1),"."); 
	        		board[temp.get(2)] = board[temp.get(2)].replace(board[temp.get(2)].substring(temp.get(3), temp.get(3)+1),".");
	        		tile.remove(i);
	        		i =-1;
	        	}
	        }
	        //return answer.equals("") ? "IMPOSSIBLE" : answer;
            return answer.length() == map.size() ? answer : "IMPOSSIBLE";
	    }
	 public void positionMake(String[] board, HashMap<String, ArrayList<Integer>> map)
	 {
		 for(int i =0; i< board.length; i++)
	        {
	        	for(int j = 0; j<board[0].length(); j++)
	        	{
	        		if(board[i].charAt(j)>='A' && board[i].charAt(j)<='Z')
	        		{
	        			String key =board[i].substring(j,j+1);
	        			if(map.containsKey(key))
	        			{
	        				ArrayList<Integer> temp = map.get(key);
	        				temp.add(i);
	        				temp.add(j);
	        				map.replace(key, temp);
	        			}
	        			else
	        			{
	        				ArrayList<Integer> temp = new ArrayList<>();
	        				temp.add(i);
	        				temp.add(j);
	        				map.put(key, temp);
	        			}
	        		}
	        	}
	        }
	 }
	 public boolean routeCheck(int i1, int j1, int i2, int j2, String[] board, String name)
	 {
		 boolean result = true;
		 if(i1==i2)
		 {
			 int start = j1>j2 ? j2 : j1, end = j1>j2 ? j1 : j2;
			 for(int i = start; i<= end; i++)
			 {
				 if(board[i1].charAt(i)!='.' && !board[i1].substring(i,i+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
		 }else if(j1==j2)
		 {
			 int start = i1>i2 ? i2 : i1, end = i1>i2 ? i1 : i2;
			 for(int i = start; i<= end; i++)
			 {
				 if(board[i].charAt(j1)!='.' && !board[i].substring(j1,j1+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
		 }
		 else
		 {
			 
			 int start = i1>i2 ? i2 : i1, end = i1>i2 ? i1 : i2;
			 int startJ = start == i1 ? j1 : j2, endJ = start == i1 ? j2 : j1;
			 for(int i = start; i<=end; i++)
			 {
				 
				 if(board[i].charAt(startJ)!='.' && !board[i].substring(startJ,startJ+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
			 if(result)
			 {
				 startJ = j1>j2 ? j2 : j1; endJ = j1>j2 ? j1 : j2;
				 for(int i = startJ; i<=endJ; i++)
				 {
					 if(board[end].charAt(i)!='.' && !board[end].substring(i,i+1).equals(name))
					 {
						 result = false;
						 break;
					 }
				 }
			 }
			 
			 if(result) return result;
			 else
			 {
				 start = i1>i2 ? i2 : i1; end = i1>i2 ? i1 : i2;
				 startJ = start == i1 ? j1 : j2; endJ = start == i1 ? j2 : j1;
				 result = true;
				 for(int i = start; i<=end; i++)
				 {
					 if(board[i].charAt(endJ)!='.' && !board[i].substring(endJ,endJ+1).equals(name))
					 {
						 result = false;
						 break;
					 }
				 }
					 
				 if(result)
				 {
					 startJ = j1>j2 ? j2 : j1; endJ = j1>j2 ? j1 : j2;
					 for(int i = startJ; i<=endJ; i++)
					 {
						 if(board[start].charAt(i)!='.' && !board[start].substring(i,i+1).equals(name))
						 {
							 result = false;
							 break;
						 }
					 }
						 
				 }
			 }
		 }
		 return result;
	 }
}
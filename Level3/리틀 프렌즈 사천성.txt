import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collections;

/*
좀 쓸데없는 코드가 들어갔지만...

아이디어가 중요한 문제.
1) 시간 초과
처음에 보고 모든 케이스를 다 만들어서 돌리는 걸 생각했는데, 그렇게 하면 시간초과임.
2) 메모리 용량
모든 케이스를 만들어서 저장하면 메모리를 너무 많이 씀.
어차피 사전순서고, 만들 수 없으면 impossible라면
key들을 정렬하고, 순서대로 돌려봄. 
통과하면 해당 키를 remove하고, 통과하지 못하면 일단 넘어감.
반복문이 끝났는데 만든 정답의 길이가 전체 key의 사이즈와 다르면 impossible임

++
이런 타일에 이동문제에서 조건으로 막 따지는 것보다 좋은 풀이를 생각함.
up, down으로 나눔.(x 기준)
그리고 start, end를 하고 이거를 start > end면 start-- , 반대면 start++ 해서 이동하면 조건문이 훨씬 줄어듦.
*/
class Solution {
    public String solution(int m, int n, String[] board) {
        String answer = "IMPOSSIBLE";
        StringBuilder result = new StringBuilder();
        HashMap<Character, int[]> tilesMap = new HashMap<>();
        ArrayList<Character> tilesList = new ArrayList<>();
        char[][] copyBoard = new char[board.length][board[0].length()];
        makingBoard(board, copyBoard);
            
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length(); j++) {
                if(upperCase(board[i].charAt(j))) {
                    if(tilesMap.containsKey(board[i].charAt(j))) {
                        tilesMap.get(board[i].charAt(j))[2] = i;
                        tilesMap.get(board[i].charAt(j))[3] = j;
                    } else {
                        tilesMap.put(board[i].charAt(j), new int[4]);
                        tilesMap.get(board[i].charAt(j))[0] = i;
                        tilesMap.get(board[i].charAt(j))[1] = j;
                    }    
                }
            }
        }
        
        for(char key : tilesMap.keySet()) {
            tilesList.add(key);
        }
        Collections.sort(tilesList);
        
        for(int i = 0; i < tilesList.size(); i++) {
            char cur = tilesList.get(i);
            
            if(routeCheck(copyBoard, cur, tilesMap.get(cur))) {
                copyBoard[tilesMap.get(cur)[0]][tilesMap.get(cur)[1]] = '.';
                copyBoard[tilesMap.get(cur)[2]][tilesMap.get(cur)[3]] = '.';
                result.append(String.valueOf(cur));
                tilesList.remove(i);
                i = -1;
            }
        }
  
        answer = result.length() != tilesMap.size() ? "IMPOSSIBLE" : result.toString();
        return answer;
    }
    
    public boolean routeCheck(char[][] copyBoard, char key, int[] positions) {
        int[] up = new int[2], down = new int[2];
        boolean check = true;

        if(positions[0] < positions[2]) {
            up[0] = positions[0];
            up[1] = positions[1];
            down[0] = positions[2];
            down[1] = positions[3];
        } else  {
            up[0] = positions[2];
            up[1] = positions[3];
            down[0] = positions[0];
            down[1] = positions[1];
        }
        
        int start = up[0], end = down[0];
        while(start != end) {
            if(start > end) {
                start--;
            } else {
                start++;
            }
            
            // 우선 직선으로 움직임.
            if(copyBoard[start][up[1]] == '*' || (copyBoard[start][up[1]] != '.' && copyBoard[start][up[1]] != key)) {
                check = false;
                break;
            }
            
        }
        
        // 직선으로 움직이는 게 성공했으면 가로로. (여기까지 동작하면 |_ 혹은 |- 이 모양으로 움직인 것)
        if(check) {
            start = up[1]; end = down[1];
            while(start != end) {
                if(start > end) {
                    start--;
                } else {
                    start++;
                }
                if(copyBoard[down[0]][start] == '*' || (copyBoard[down[0]][start] != '.' && copyBoard[down[0]][start] != key)) {
                    check = false;
                    break;
                }
            }
        } 
        if(check) {
            return true;
        } else {
            check = true;
        }

        // 위에서 틀렸으면 이제 가로 먼저 움직임. -| 혹은 _| 이런 모양임
        start = up[1]; end = down[1];
        while(start != end) {
            if(start > end) {
                start--;
            } else {
                start++;
            }
            
            if(copyBoard[up[0]][start] == '*' || (copyBoard[up[0]][start] != '.' && copyBoard[up[0]][start] != key)) {
                check = false;
                break;
            }
        }
        if(check) {
            start = up[0]; end = down[0];
            while(start != end) {
                if(start > end) {
                    start--;
                } else {
                    start++;
                }
                if(copyBoard[start][down[1]] == '*' || (copyBoard[start][down[1]] != '.' && copyBoard[start][down[1]] != key)) {
                    check = false;
                    break;
                }
            }
        } 
        if(!check) {
            return false;
        } else {
            return true;
        }
    }
    
    public void makingBoard(String[] board, char[][] copyBoard) {
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length(); j++) {
                copyBoard[i][j] = board[i].charAt(j);
            }
        }
    }
    
    public boolean upperCase(char tile) {
        if(tile >= 'A' && tile <= 'Z') {
            return true;
        } 
        return false;
    }
}



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
class Solution {
    public String solution(int m, int n, String[] board) {
	        String answer = "";
	        HashMap<String, ArrayList<Integer>> map = new HashMap<>();
	        ArrayList<String> tile = new ArrayList<String>();
	        positionMake(board, map);
	        
	        for(String i : map.keySet())
	        	tile.add(i);
	        Collections.sort(tile);
	        
	        for(int i =0; i<tile.size(); i++)
	        {
	        	ArrayList<Integer> temp = map.get(tile.get(i));
	        	if(temp.size()==4 &&routeCheck(temp.get(0), temp.get(1), temp.get(2), temp.get(3), board, tile.get(i)) )
	        	{	        	
	        		answer += tile.get(i);
	        		board[temp.get(0)] = board[temp.get(0)].replace(board[temp.get(0)].substring(temp.get(1), temp.get(1)+1),"."); 
	        		board[temp.get(2)] = board[temp.get(2)].replace(board[temp.get(2)].substring(temp.get(3), temp.get(3)+1),".");
	        		tile.remove(i);
	        		i =-1;
	        	}
	        }
	        //return answer.equals("") ? "IMPOSSIBLE" : answer;
            return answer.length() == map.size() ? answer : "IMPOSSIBLE";
	    }
	 public void positionMake(String[] board, HashMap<String, ArrayList<Integer>> map)
	 {
		 for(int i =0; i< board.length; i++)
	        {
	        	for(int j = 0; j<board[0].length(); j++)
	        	{
	        		if(board[i].charAt(j)>='A' && board[i].charAt(j)<='Z')
	        		{
	        			String key =board[i].substring(j,j+1);
	        			if(map.containsKey(key))
	        			{
	        				ArrayList<Integer> temp = map.get(key);
	        				temp.add(i);
	        				temp.add(j);
	        				map.replace(key, temp);
	        			}
	        			else
	        			{
	        				ArrayList<Integer> temp = new ArrayList<>();
	        				temp.add(i);
	        				temp.add(j);
	        				map.put(key, temp);
	        			}
	        		}
	        	}
	        }
	 }
	 public boolean routeCheck(int i1, int j1, int i2, int j2, String[] board, String name)
	 {
		 boolean result = true;
		 if(i1==i2)
		 {
			 int start = j1>j2 ? j2 : j1, end = j1>j2 ? j1 : j2;
			 for(int i = start; i<= end; i++)
			 {
				 if(board[i1].charAt(i)!='.' && !board[i1].substring(i,i+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
		 }else if(j1==j2)
		 {
			 int start = i1>i2 ? i2 : i1, end = i1>i2 ? i1 : i2;
			 for(int i = start; i<= end; i++)
			 {
				 if(board[i].charAt(j1)!='.' && !board[i].substring(j1,j1+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
		 }
		 else
		 {
			 
			 int start = i1>i2 ? i2 : i1, end = i1>i2 ? i1 : i2;
			 int startJ = start == i1 ? j1 : j2, endJ = start == i1 ? j2 : j1;
			 for(int i = start; i<=end; i++)
			 {
				 
				 if(board[i].charAt(startJ)!='.' && !board[i].substring(startJ,startJ+1).equals(name))
				 {
					 result = false;
					 break;
				 }
			 }
			 if(result)
			 {
				 startJ = j1>j2 ? j2 : j1; endJ = j1>j2 ? j1 : j2;
				 for(int i = startJ; i<=endJ; i++)
				 {
					 if(board[end].charAt(i)!='.' && !board[end].substring(i,i+1).equals(name))
					 {
						 result = false;
						 break;
					 }
				 }
			 }
			 
			 if(result) return result;
			 else
			 {
				 start = i1>i2 ? i2 : i1; end = i1>i2 ? i1 : i2;
				 startJ = start == i1 ? j1 : j2; endJ = start == i1 ? j2 : j1;
				 result = true;
				 for(int i = start; i<=end; i++)
				 {
					 if(board[i].charAt(endJ)!='.' && !board[i].substring(endJ,endJ+1).equals(name))
					 {
						 result = false;
						 break;
					 }
				 }
					 
				 if(result)
				 {
					 startJ = j1>j2 ? j2 : j1; endJ = j1>j2 ? j1 : j2;
					 for(int i = startJ; i<=endJ; i++)
					 {
						 if(board[start].charAt(i)!='.' && !board[start].substring(i,i+1).equals(name))
						 {
							 result = false;
							 break;
						 }
					 }
						 
				 }
			 }
		 }
		 return result;
	 }
}

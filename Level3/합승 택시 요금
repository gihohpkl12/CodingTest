import java.util.Arrays;

/*
플로이드 와샬을 생각하면 되는 문제.
근데 플로이드 와샬을 많이 안 써봐서 생각하기 힘들 것 같음.
특정 노드까지는 동승하고, 이후에는 헤어져서 간다를 특정 노드를 거쳐서 간다 라고 생각하면 됨.
*/
class Solution {
    public int solution(int n, int s, int a, int b, int[][] fares) {
        int answer = Integer.MAX_VALUE;
        int[][] roads = new int[n+1][n+1];
        
        for(int i = 0; i < roads.length; i++) {
            // 불가능한 값을 선정함.
            Arrays.fill(roads[i], n * 100000);
            // 본인 -> 본인 노드는 0
            roads[i][i] = 0;
        }
        
        // 요금
        for(int[] fare : fares) {
            roads[fare[0]][fare[1]] = fare[2];
            roads[fare[1]][fare[0]] = fare[2];
        }
        
        // i에서 j로 갈 때, k를 경유해서 가는 경우 vs i에서 j로 바로 가는 경우.
        for(int k = 1; k < roads.length; k++) {
            for(int i = 1; i < roads.length; i++) {
                for(int j = 1; j < roads.length; j++) {
                    roads[i][j] = Math.min(roads[i][j] , roads[i][k] + roads[k][j]);
                }
            }
        }
        
        // 특정 지역까지는 같이 가고, 이후부터 헤어져서 간다 -> 특정 노드를 경유해서 간다.
        // 경유하지 않고 바로 가는 경우 (s -> a, s -> b)도 포함되어 있음. [s][s] -> [s][a] -> [s][b]
        // 위와 같은 개념으로 a나 b까지 같이 갔다가 가는 경우도 있음. [s][a] -> [a][a] -> [a][b]
        for(int i = 1; i < roads.length; i++) {
            answer = Math.min(roads[s][i] + roads[i][a] + roads[i][b], answer);
        }
        return answer;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

// 플로이드 와샬 문제
import java.util.Arrays;

class Solution {
    public int solution(int n, int s, int a, int b, int[][] fares) {
        int answer = 0;
        int[][] floydWarshall = new int[n+1][n+1];
        
        for(int i = 0; i < floydWarshall.length; i++) {
           Arrays.fill(floydWarshall[i], n*100000);
            floydWarshall[i][i] = 0;
        }
        
        for(int i = 0; i < fares.length; i++) {
            floydWarshall[fares[i][0]][fares[i][1]] = fares[i][2];
            floydWarshall[fares[i][1]][fares[i][0]] = fares[i][2];
        }
        
        for(int i = 1; i < floydWarshall.length; i++) {
            for(int j = 1; j < floydWarshall.length; j++) {
                for(int k = 1; k < floydWarshall.length; k++) {
                   floydWarshall[j][k] = Math.min(floydWarshall[j][k], floydWarshall[j][i] + floydWarshall[i][k]);
                }
            }
        }
        
        answer = Integer.MAX_VALUE;
        for(int i = 1; i < floydWarshall.length; i++) {
           answer = Math.min(answer, floydWarshall[s][i] + floydWarshall[i][a] + floydWarshall[i][b]);
        }
        
       answer = answer < floydWarshall[s][a] + floydWarshall[s][b] ? answer : floydWarshall[s][a] + floydWarshall[s][b];
        
        return answer;
    }
}

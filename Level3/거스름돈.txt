import java.util.Arrays;

/*
DP 생각하기 좋은 문제.
DP로 계산할 것이 2개임.
우선 1원부터 N원까지 사용하는 것.
그리고 작은 화폐 종류부터 큰 화폐 종류를 생각하는 것.
1,2,4원으로 예를 들면

우선 1원
1원짜리로 1,2,3,4,5원을 만드는 경우의 수를 만듦.
(전부 1임. 1원짜리 1개, 2개,,, 5개)

2원에서는 [i-1][j]를 더하고 시작함.
즉, 1원과 2원을 사용해서 1,2,3,4,5원을 만드는 경우의 수를 계산하니까
이전에 1원만 사용한 경우의 수를 기본적으로 넣는 것임.

2원으로 1원을 만든 수는 없음. 그냥 1원짜리 1개 경우의 수임.
2원은 2원짜리 한개로 만들 수 있음.

그래서 우선 조건에 j == curMoney면 +1을 함.
(%로 안 하는 이유는 밑에 있음.)

3원부터는 현재 화폐 2원보다 큼.
고로 우선 1원짜리로 3원을 만드는 경우의수 1개를 가져오고,
3원에서 2원을 뺀 경우, 즉 1원을 만드는 경우의 수를 가져오는데
이건 1원과 2원을 이용해서 만든 경우의 수임.([i][j - curMoney])

4원은 2원짜리 2개로도 만들 수 있는 경우의 수임.
이걸 보면
2원*2, 2원*1 + 1원*2, 1원*4 이렇게 경우의 수가 나옴.
1*4는 [i-1][j]에서 가져오고,
2원*2, 2원*1 + 1원*2 이 경우의 수는
[i][j - curMoney]에서 가져옴.
설명하면, 4원에서 2원을 빼면 2원임.
고로 1원과 2원을 사용해서 2원을 만드는 경우의수 1원*2, 2원*1에서 각각 +2원씩하면 4원임.
이렇게 해서 경우의 수 3개를 다 만듦.
이후부터는 이것과 같은 로직으로 전부 만들어짐.

*/
class Solution {
    public int solution(int n, int[] money) {
        int[][] dp = new int[money.length][n+1];
        return calDP(dp, n, money);
    }
    public int calDP(int[][] dp, int n, int[] money) {
        for(int i = 0; i < money.length; i++) {
            int currency = money[i];
            
            for(int j = 1; j <= n; j++) {
                // i가 0인 경우는 초기화를 위한 경우임. 1원을 예로 생각하면 됨.([i-1][j]를 위한 셋팅)
                // 근데 꼭 1원이라는 조건은 문제에 없긴 함.
                if(i > 0) {
                    // 현재 화폐를 사용하지 않고, 현재 금액을 만든 경우의 수를 가져옴.
                    dp[i][j] += dp[i-1][j];
                    // 같으면 해당 화폐를 위한 경우의 수 추가
                    if(j == currency) {
                        dp[i][j]++;
                    }
                    // 크면 이제 남는 돈에 대한 경우의 수를 가져올 수 있음.
                    if(j > currency) {
                        // ex. 1,2원짜리로 4원 만들 때
                        // 2원짜리는 일단 한개 쓴다고 치고, 1,2원으로 2원 만들 경우의 수를 가져옴
                        dp[i][j] += dp[i][j - currency] != 0 ? dp[i][j - currency] : 0;
                    }
                } else {
                    if(j % currency == 0) {
                        dp[i][j]++;
                    }
                }       
            }
        }
        return dp[money.length-1][n] % 1000000007;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Arrays;
class Solution {
    public int solution(int n, int[] money)
	{
		int[][] dp = new int[money.length][n+1];
		dp[0][0] = 1;
		Arrays.sort(money);
		for(int i =0; i< dp.length; i++)
		{
			for(int j =1; j< dp[0].length; j++)
			{
				if(i==0)
				{
					dp[i][j] = j%money[i]==0 ? 1 : 0;
				}else
				{
					dp[i][j] = dp[i-1][j];
					dp[i][j] += j==money[i] ? 1 : 0;
					dp[i][j] += j-money[i]>=0 ? dp[i][j-money[i]] : 0;
				}
			}
		}
		return dp[dp.length-1][n]%1000000007;
	}
	
	
}

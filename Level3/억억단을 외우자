/*
문제를 보고 개수를 구해보면 감이 잡힘.
억억단에서 8이 나온 회수는 약수의 개수와 같음.

8이 생성되는 경우를 따지만
2, 4 
4, 2
이렇게 2개랑 가로 맨 첫줄, 세로 맨 첫줄에 8, 8 두번 나오기 때문임.
사실 이것도 숫자로 따지면
1, 8
8,1 임
그래서 따지고 보면 1, 2, 4, 8 이렇게 4개로 약수의 개수와 같음

이건 다 눈치를 채는데 약수의 개수를 구하는 게 문제임.
그냥 Math.sqrt(n)까지 돌려서 곱하기2 이 방식으로는 10번이 시간초과남.

약수 구하는 건
아래 약수 구하는 메소드 코드 참고.

*/
class Solution {
    public int[] solution(int e, int[] starts) {
        int[] answer = new int[starts.length];
        int[] divisorCountArr = new int[e+1];
        
        countDivisor(divisorCountArr, e);
        
        int[] ranking = new int[e+1];
        int maxNum = e;
        int maxCount = -1;
        for(int i = e; i > 0; i --) {
            if(divisorCountArr[i] >= maxCount) {
                maxNum = i;
                maxCount = divisorCountArr[i];
            }
            ranking[i] = maxNum;
        }
              
        for(int i = 0; i < starts.length; i++) {
            answer[i] = ranking[starts[i]];
        }
            
        return answer;
    }
    
    // 약수의 개수를 구하는 메소드
    // 이게 원래 알던 방식보다 훨씬 빠름
    public void countDivisor(int[] divisorCountArr, int e) {
        for(int i = 1; i <= e; i ++) {
            for(int j = 1; j <= e/i; j++) {
                divisorCountArr[i*j]++;
            }
        }
    }
}

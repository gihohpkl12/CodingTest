import java.util.HashMap;
class Solution {
    public int solution(int n, int[][] costs) {
        int answer = 0;
        int min = Integer.MAX_VALUE, index =0;
        boolean[] check = new boolean[n];
        HashMap<Integer, Integer> complete = new HashMap<>();
        complete.put(0, 0); check[0] = true;

        for(int i =0; i< costs.length; i++)
        {
        	if(costs[i][0]==0 || costs[i][1]==0)
        	{
        		if(costs[i][0]==0)
        		{
        			if(min>costs[i][2])
        			{
        				min = costs[i][2];
            			index = costs[i][1];
        			}
        		} if(costs[i][1]==0)
        		{
        			if(min>costs[i][2])
        			{
        				min = costs[i][2];
            			index = costs[i][0];
        			}
        		}
        	}
        }
        answer += min;
        check[index] = true;
        complete.put(index, index);
       // System.out.println("index "+index+" value "+min);
        while(complete.size()!=n)
        {
        	min = Integer.MAX_VALUE;
        	for(int i =0; i< costs.length; i++)
        	{
        		if(complete.containsKey(costs[i][0]) || complete.containsKey(costs[i][1]))
        		{
        			if(complete.containsKey(costs[i][0]) && complete.containsKey(costs[i][1])) continue;
        			if(complete.containsKey(costs[i][0]) && !complete.containsKey(costs[i][1]))
        			{
        				if(min > costs[i][2])
            			{
            				min = costs[i][2];
            				index =  costs[i][1];
            			}
        			}
        			if(complete.containsKey(costs[i][1]) && !complete.containsKey(costs[i][0]))
        			{
        				if(min > costs[i][2])
            			{
            				min = costs[i][2];
            				index = costs[i][0];
            			}
        			}
        		}
        	}
        	answer += min;
        	check[index] = true;
        	complete.put(index,index);
        }
        return answer;
    }
}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Arrays;

/*
DP인지 아닌지 알아보는 게 어려운 문제.
이전 상태의 값이 다음 상태에 영향을 끼친다 -> DP를 의심해야 함.
맨 처음과 맨 마지막은 변경이 불가능함.
고로 그 이후부터 따지면 됨.
1번 인덱스부터 length-1인덱스까지 이전에서 바꾼다 vs 안 바꾼다의 케이스를 따지면 됨.
바꾸면 1회, 안 바꾸면 0회. (같은 곳이면 또 0)
*/
class Solution {
    public int solution(int n, int m, int[][] edge_list, int k, int[] gps_log) {
        // DP를 위한 불가능한 값 설정
        int answer = 100000, inf = 100000;
        // 로그 데이터를 기준으로 배열을 생성하고, 이전 노드에서 움직임을 따지기 위해서 노드 수만큼 생성.
        int[][] roadDP = new int[gps_log.length][n+1];
        // 이건 이동 가능한 길을 체크하기 위함.
        HashMap<Integer, Integer>[] roadCheck = new HashMap[n+1];
        
        // 초기화
        for(int i = 1; i < roadCheck.length; i++) {
            roadCheck[i] = new HashMap<>();
        }
        
        // inf 초기화
        for(int i = 0; i < roadDP.length; i++) {
            Arrays.fill(roadDP[i], inf);
        }
        
        // 길 셋팅
        for(int[] edge : edge_list) {
            int start = edge[0], end = edge[1];
            roadCheck[start].put(end, 0);
            roadCheck[end].put(start, 0);
        }
        
        // 시작지점은 0
        roadDP[0][gps_log[0]] = 0;
        // 로그 기록 기준 시작.
        for(int i = 1; i < gps_log.length-1; i++) {
            // 노드 숫자만큼 반복. j는 이동할 노드임.
            for(int j = 1; j <= n; j++) {
                // 가중치값. gps_log[i] == j은 움직이지 않을 케이스를 의미함. 
                int addNum = gps_log[i] == j ? 0 : 1;
                // 최소값을 구하기 위해서 이전 노드에서 가중치를 더하는 게 이득인가 아닌가를 따져서 값을 정함.
                roadDP[i][j] = roadDP[i-1][j] + addNum < roadDP[i][j] ? roadDP[i-1][j] + addNum : roadDP[i][j];
                for(int canMove : roadCheck[j].keySet()) {
                    roadDP[i][j] = roadDP[i-1][canMove] + addNum > roadDP[i][j] ? roadDP[i][j] : roadDP[i-1][canMove] + addNum;
                }
            }
        }
        int end = gps_log[gps_log.length-1];
        
        // 마지막 로그 이전에 로그를 기준으로 해당 로그에서 가능한 노드들을 가지고 최소값을 따짐.
        for(int i : roadCheck[end].keySet()) {
            answer = answer < roadDP[gps_log.length-2][i] ? answer : roadDP[gps_log.length-2][i];
        }
        
        return answer == inf ? -1 : answer;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
문제 풀이
DP로 접근하지 않으면 시간 초과.
HashMap 안에 HashMap을 넣는 것보다, Hash[]로 만드는 것이 메모리적으로 더 효율적.
로직.
처음 시작하는 곳은 0으로 초기화함. (문제 규칙에 시작지점과 끝지점은 항상 옳다고 명시)
다음 구간부터 DP의 개념으로 
이동할 경우와 이동하지 않을 경우를 계산함.
현재의 값은 이전의 값 + 이동할 경우 증가할 값이 됨. (같은 노드 -> 같은 노드 라면 0, 아니라면 1)

정답은 
맨 마지막 전에 계산한 값 중에 최소가 됨.(맨 마지막은 계산하지 않아도 됨. 무조건 옳기 때문에 0임)
*/
import java.util.ArrayList;  
import java.util.Arrays;

class Solution {
	public int solution(int n, int m, int[][] edge_list, int k, int[] gps_log) {
		int answer = 987654321;
		int[][] dp = new int[n+1][n+1];
		ArrayList<Integer>[] map = new ArrayList[n+1];

		for(int[] a : dp) {
			Arrays.fill(a, 987654321);
		}
		
		for(int i = 0; i< map.length; i++)
			map[i] = new ArrayList<>();

		for(int i = 0; i< edge_list.length; i++) {
			int start = edge_list[i][0], end = edge_list[i][1];
			map[start].add(end);
			map[end].add(start);
		}
		
		dp[0][gps_log[0]] = 0;
		for(int i = 1; i< gps_log.length-1; i++) {
			for(int j = 1; j<=n; j++) {
				int add = gps_log[i]==j ? 0 : 1;
				dp[i][j] = Math.min( dp[i-1][j]+add, dp[i][j]);
				for(int q : map[j]) {
					dp[i][j] = Math.min(dp[i][j], dp[i-1][q]+add);
				}
			}
		}
		for(int p : map[gps_log[k-1]]) {
		    answer = Math.min(answer, dp[gps_log.length-2][p]);
		}

		return answer!=987654321 ? answer : -1;
	}
}

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

/*
순서를 정할 때 필요한 것.
1. 장르별 총합.
2. 같은 장르 내에 재생된 순서대로 정렬

문제 자체는 그렇게 어렵지 않음.
장르 별로 합을 구하고, 각 장르별 노래 정보를 기준에 따라 pq에 저장하면 됨.
근데 map을 정렬하는 등의 작업에서 Map.Entry 등 잘 안 쓰는 메소드 등을 쓰게 됨.
*/
class Solution {
    public int[] solution(String[] genres, int[] plays) {
        // 장르별 노래 재생 총합
        HashMap<String, Integer> totalGenrePlayCount = new HashMap<>();
        // 장르에 노래 목록
        HashMap<String, PriorityQueue<GenreInfo>> genreInfoMap = new HashMap<>();
        
        // 정보 저장
        for(int i = 0; i < genres.length; i++) {
            String genre = genres[i];
            int index = i;
            int count = plays[i];
            
            GenreInfo curGenre = new GenreInfo();
            curGenre.index = index;
            curGenre.genre = genre;
            curGenre.playCount = count;
            
            if(totalGenrePlayCount.containsKey(genre)) {
                totalGenrePlayCount.replace(genre, totalGenrePlayCount.get(genre)+count);
                genreInfoMap.get(genre).add(curGenre);
                
            } else {
                totalGenrePlayCount.put(genre, count);
                genreInfoMap.put(genre, creatQ());
                genreInfoMap.get(genre).add(curGenre);
            }
        }
        
        // 재생 총합 기준으로 정렬 시키고, 해당 장르 내에서도 재생 횟수를 기준으로 2곡을 찾음.
        ArrayList<Map.Entry<String, Integer>> sortedList = sortMap(totalGenrePlayCount);
        ArrayList<Integer> answer = new ArrayList<>();
        // key는 가장 많이 재생된 장르 순서.
        for(Map.Entry<String, Integer> key : sortedList) {
            // pq는 해당 장르 내에서 재생 횟수를 기준으로 정렬된 노래들.
            PriorityQueue<GenreInfo> pq = genreInfoMap.get(key.getKey());
            int count = 2;
            while(pq.size() > 0) {
                answer.add(pq.poll().index);
                count--;
                if(count == 0) {
                    break;
                }
            }
        }
        
        return answer.stream().mapToInt(Integer::intValue).toArray();
    }
    
    // 장르의 재생 총합을 기준으로 정렬함.
    // Map.Entry 이용.
    public ArrayList<Map.Entry<String, Integer>> sortMap(HashMap<String, Integer> totalGenrePlayCount) {
        ArrayList<Map.Entry<String, Integer>> sortedList = new ArrayList<>(totalGenrePlayCount.entrySet());
        sortedList.sort(new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return o2.getValue() - o1.getValue();
            }
        });
        
        return sortedList;
    }
    
    // 장르 내에 속한 노래를 저장하는 q 생성.
    // 기준 1. 재생된 횟수
    // 기준 2. 인덱스
    public PriorityQueue creatQ() {
        PriorityQueue<GenreInfo> pq = new PriorityQueue<>(new Comparator<>(){
            public int compare(GenreInfo o1, GenreInfo o2) {
                if(o1.playCount != o2.playCount ) {
                    return o2.playCount - o1.playCount;
                }
                
                return o1.index - o2.index;
            }
        });
        return pq;
    }
    
    class GenreInfo {
        String genre;
        int playCount;
        int index;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;

class Solution {
    public int[] solution(String[] genres, int[] plays) {
        int[] answer;
        HashMap<String,ArrayList<song>> play = new HashMap<>();
        ArrayList<Integer> answerlist = new ArrayList<>();
        for(int i =0; i<genres.length; i++)
        {
            if(play.containsKey(genres[i]))
            {
            	ArrayList<song> templist = play.get(genres[i]);
            	song temp = templist.get(0);
            	song temp2 = new song(plays[i],i);
            	templist.add(temp2);
            	temp.max += plays[i];
            	templist.set(0, temp);
            	play.replace(genres[i], templist);
            }
            else
            {
            	ArrayList<song> templist = new ArrayList<>();
            	song temp = new song(plays[i]);
            	song temp2 = new song(plays[i],i);
            	templist.add(temp);
            	templist.add(temp2);
            	play.put(genres[i], templist);
            }
        }
        
        ArrayList<Map.Entry<String, ArrayList<song>>> entry = new ArrayList<>(play.entrySet());
        Collections.sort(entry, new Comparator<Map.Entry<String, ArrayList<song>> >() 
        {
        	public int compare(Map.Entry<String, ArrayList<song>> o1, Map.Entry<String, ArrayList<song>> o2)
        	{
        		return o2.getValue().get(0).max-o1.getValue().get(0).max;
        	}
        });
        
        for(int i =0; i<entry.size(); i++)
        {
        	ArrayList<song> temp = entry.get(i).getValue();
        	temp.remove(0);
        	Collections.sort(temp, new Comparator<song>()
        	{
        		public int compare(song o1, song o2)
        		{
        			return o2.count-o1.count;
        		}
        	});
        	if(temp.size()>=2)
        	{
        		answerlist.add(temp.get(0).index);
        		answerlist.add(temp.get(1).index);
        	}else
        		answerlist.add(temp.get(0).index);
        }
        answer = new int[answerlist.size()];
        for(int i =0; i<answerlist.size(); i++)
        	answer[i] = answerlist.get(i);
        return answer;
    }
    class song 
    {
        int count;
        int index;
        int max;
        public song(int count, int index)
        {
            this.count = count;
            this.index = index;
        }
        public song(int max)
        {
        	this.max = max;
        }
    }
}

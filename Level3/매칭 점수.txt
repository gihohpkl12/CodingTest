import java.util.HashMap;
import java.util.ArrayList;

/*
로직
웹페이지를 읽고, bagic link와 out link를 만듦.
반복 횟수를 줄이기 위해서 out link가 생성됐을 때, map에 없더라도 일단 생성하고 외부 링크값을 넣어줌.
나중에 위의 out link가 bagic link로 나왔을 때, 나머지 값을 넣어줌.
단, 외부 링크가 꼭 bagic link로 나오는 건 아님.
따라서 외부링크지만 우선적으로 추가한 경우에는 index를 -1로 넣고, 마지막으로 값을 비교할 때 -1은 넘어감.
*/
class Solution {
    public int solution(String word, String[] pages) {
        int answer = 0;
        HashMap<String, Page> pageData = new HashMap<>();
        word = word.toLowerCase();
        
        for(int i = 0; i < pages.length; i++) {
            String page = pages[i];
            String head = page.substring(page.indexOf("<meta property="), page.indexOf("</head>"));
            String body = page.substring(page.indexOf("<body>"), page.indexOf("</body>"));
            String addr = head.substring(head.indexOf("<meta property="), head.indexOf("\"/>"));
            addr = head.substring(head.indexOf("http"), head.indexOf("/>"));
            addr = addr.replace("\"", "");
            double bagicCount = 0;    
            
            // 우선 나왔던 외부 링크인 경우 체크
            Page curPage;
            if(pageData.containsKey(addr)) {
                curPage = pageData.get(addr);
                curPage.index = i;
            } else {
                curPage = new Page(addr);
                curPage.index = i;
            }
            
            // 외부 링크 계산
            int index = 0;
            while(index != -1) {
                index = body.indexOf("<a href=\"https", index);
                
                if(index != -1) {
                    curPage.link.add(body.substring(body.indexOf("https", index), body.indexOf("\">", index)));
                    index++;
                }
            }
            
            // 기본 점수 계산
            index = 0;
            body = body.toLowerCase();
            while(index != -1) {
                index = body.indexOf(word, index);
                if(index != -1) {
                    char front = body.charAt(index-1), end = body.charAt(index+word.length());
                    index++;
                    if(front >= 'a' && front <= 'z') {
                        continue;
                    }
                    
                    if(end >= 'a' && end <= 'z') {
                        continue;
                    }
                    bagicCount++;
                }
            }
            curPage.bagicScore = bagicCount;
            
            // 외부 링크 점수 계산 및 기존에 나온 링크가 아닌 경우에 우선적으로 넣어줌.
            for(String outLink : curPage.link) {
                if(pageData.containsKey(outLink)) {
                    pageData.get(outLink).linkScore += bagicCount/curPage.link.size();
                } else {
                    pageData.put(outLink, new Page(outLink));
                    pageData.get(outLink).linkScore += bagicCount/curPage.link.size();
                }
            }
            pageData.put(addr, curPage);
        }
        
        double maxScore = -1;
        for(String addr : pageData.keySet()) {
            Page curPage = pageData.get(addr);
            if(curPage.index == -1) {
                continue;
            }
            
            double score = curPage.bagicScore + curPage.linkScore;
            if(score > maxScore) {
                maxScore = score;
                answer = curPage.index;
            } else if(score == maxScore) {
                answer = answer > curPage.index ? curPage.index : answer;
            }
        }
        
        // for(String key : pageData.keySet()) {
        //     Page cur = pageData.get(key);
        //     System.out.println("addr "+ cur.addr);
        //     System.out.println("index "+ cur.index);
        //     System.out.println("score "+cur.bagicScore);
        //     System.out.println("score - out "+cur.linkScore);
        //     System.out.println("total  "+((float)cur.linkScore+cur.bagicScore));
        //     System.out.println("link "+ cur.link.size());
        //     for(String a : cur.link) {
        //         System.out.println(" -> "+a);
        //     }
        //     System.out.println();
        // }
        
        return answer;
    }
    
    class Page {
        int index;
        double bagicScore;
        double linkScore;
        ArrayList<String> link;
        String addr;
        
        public Page(String addr) {
            this.addr = addr;
            this.index = -1;
            this.bagicScore = 0;
            this.link = new ArrayList<>();
            this.linkScore = 0;
        }
    }
}

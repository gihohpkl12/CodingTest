class Solution {
   public int solution(String word, String[] pages) {
        int answer = 0;
        int length = pages.length;
        page[] page_arr = new page[length];
        
        for(int i=0; i<length; i++)
        {
        	page_arr[i] = new page(pages[i]);
        	page_arr[i].find_word(word, "<body>");
        	page_arr[i].find_page_address_own("content=", "<head>");
        	page_arr[i].find_out_link_address("<a href=", "<body>");
        	page_arr[i].set_link_score();

        }
        //System.out.println("out_address~ "+page_arr[1].out_address[1]);
        for(int i=0; i<length; i++)
        {
        	page_arr[i].give_match_score(page_arr, i);
        }
        float max=page_arr[0].matching_score;
        answer = 0;
        for(int i=1; i<length; i++)
        {
        	if(page_arr[i].matching_score>max)
        	{
        		max = page_arr[i].matching_score;
        		answer = i;
        	}
        }
    
        return answer;
    }
	
	class page
	{
		float word_count = 0;
		float out_link_count = 0;
		String page_address;
		String[] out_address;
		String total;
		float link_score = 0;
		float matching_score = 0;
		public page(String page_info)
		{
			this.total = page_info;
		}
		public void find_page_address_own(String word, String for_split)
		{
			int start_index = this.total.indexOf("<meta property=");
			String a = for_split.replace("<", "</");;
			int end_index = this.total.indexOf(a);
			String temp_total = this.total.substring(start_index,end_index);
			int index = temp_total.indexOf(word);
			int end = temp_total.indexOf("/>");
			this.page_address = temp_total.substring(index+word.length(),end);
			this.page_address = this.page_address.replaceAll("\"", "");
			//System.out.println("this is my page |"+this.page_address+"|");
			
		}
		// must fix it!. word must be find by word. considering space! 
		public void find_word(String word, String for_split)
		{
			int start_index = this.total.indexOf(for_split);
			String a =for_split.replace("<", "</");;
			int end_index = this.total.indexOf(a);
			String temp_total = this.total.substring(start_index, end_index);
			temp_total = temp_total.toLowerCase();
			word = word.toLowerCase();
			int index = 0;
			int count = 0;
			while(index!=-1)
			{
				index = temp_total.indexOf(word,index+1);
				if(index!=-1)
				{
					if((int)temp_total.charAt(index-1)>=65 && (int)temp_total.charAt(index-1) <= 90)
					{
						//System.out.println("one "+temp_total.substring(index-1,index+5)+" sival "+temp_total.charAt(index-1));
					}
					else if((int)temp_total.charAt(index-1)>=97 && (int)temp_total.charAt(index-1) <= 122)
					{
						//System.out.println("two "+temp_total.substring(index-1,index+5)+" sival "+temp_total.charAt(index-1));
					}
					else if((int)temp_total.charAt(index+word.length())>=65 && (int)temp_total.charAt(index+word.length()) <= 90)
					{
						//System.out.println("tre "+temp_total.substring(index-1,index+5)+" sival "+temp_total.charAt(index+word.length()));
					}
					else if((int)temp_total.charAt(index+word.length())>=97 && (int)temp_total.charAt(index+word.length()) <= 122)
					{
						//System.out.println("four "+temp_total.substring(index-1,index+5)+" sival "+temp_total.charAt(index+word.length()));
					}
					else
					{
						//System.out.println("fuck "+temp_total.substring(index-1,index+5)+" sival "+temp_total.charAt(index-1));
						count++;
					}
				}
			}
			this.word_count = count;
			this.matching_score += this.word_count;
			
		}
		public void find_out_link_address(String word, String for_split)
		{
			int start_index = this.total.indexOf(for_split);
			String a =for_split.replace("<", "</");;
			int end_index = this.total.indexOf(a);
			String temp_total = this.total.substring(start_index, end_index);
			int href_index=0;
			int link_count =0;
			while(href_index!=-1)
			{
				href_index = temp_total.indexOf(word,href_index+1);
				if(href_index!=-1)
				{
					link_count++;
					
				}
			}
			this.out_link_count = link_count;
			if(link_count!=0)
			{
				this.out_address = temp_total.substring(temp_total.indexOf(word)+word.length()).split(word);
				for(int i=0; i<out_address.length; i++)
				{
					//System.out.println("before change |"+out_address[i]);
					int loc = out_address[i].indexOf(">");
					out_address[i] = out_address[i].substring(0,loc);
					out_address[i] = out_address[i].replaceAll("\"", "");
					//System.out.println("after change |"+out_address[i]+"|");
				}
			}
			
		}
		public void set_link_score()
		{
			if(this.word_count!=0 && this.out_link_count!=0)
			{
				this.link_score = (float)this.word_count/(float)this.out_link_count;
			}
			
		}
		public void give_match_score(page[] page,int index)
		{
			if(this.out_address!=null && this.out_address.length!=0)
			{
				//System.out.println("hi "+this.page_address);
				for(int i =0; i<this.out_address.length;i++)
				{
					for(int j=0;j<page.length;j++)
					{
						if(j!=index)
						{
							if(this.out_address[i].equals(page[j].page_address))
							{

								page[j].matching_score+=(float)this.link_score;
							}
						}
					}
				}
			}
			
		}
	}
}
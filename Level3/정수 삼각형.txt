/*
전형적인 DP 문제.
방향을 위에서 아래, 아래에서 위 중에 어느 방향이 더 효율적인지 빨리 따져야 함.
(아래에서 위가 더 효율적인 듯.)
*/
class Solution {
    public int solution(int[][] triangle) {
        for(int i = triangle.length-2; i >= 0; i--) {
            for(int j = 0; j < triangle[i].length; j++) {
                triangle[i][j] += Math.max(triangle[i+1][j], triangle[i+1][j+1]);
            }
        }        
        return triangle[0][0];
    }
}
----------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int solution(int[][] triangle) {
        int answer = 0;
        int[][] dp = new int[triangle.length][];
        
        for(int i =0; i< dp.length; i++)
            dp[i] = new int[triangle[i].length];
        
        for(int i = triangle.length-1; i>=0; i--)
        {
        	
            for(int j =0; j<dp[i].length; j++)
            {
            	if(i == triangle.length-1)
            		dp[i][j] = triangle[i][j];
            	else
            		dp[i][j] = dp[i+1][j] > dp[i+1][j+1] ? dp[i+1][j]+triangle[i][j] : dp[i+1][j+1]+triangle[i][j];
            }
        }
        answer = dp[0][0];
        return answer;
    }
}

import java.util.Arrays;

/*
DP로 풀어야 하는 문제인데, 그리디하게 접근해서 문제인 문제.
만약에 왼손과 오른손이 이동하는 거리가 같은 경우에 뒤에 케이스에서 값이 달라질 수 있음.
따라서 DP로 (이전 위치 기준) 접근해야 함.

우선 거리를 계산.
숫자 패드를
1 2 3
4 5 6
7 8 9 
10 11 12 
이렇게 치환함.

이렇게 하면 사칙연산으로 계산하기 쉬움.
보면
1, 2, 3 까지는 1층.
4, 5, 6 까지는 2층.
수직 = 값 / 3 이고, 나머지가 0이 아니면 +1.

수평은 위치가 1, 2, 3이 나옴. (한 줄에 3개씩이니까)
수평 = 값 % 3 이고, 나머지가 0이면 3으로 치환.

이러면
숫자 i, j로 이동하는 경우에서 수평갭, 수직갭을 구할 수 있음.
1, 9로 예를 들면
1은 수직1, 수평1
9는 수직3, 수평3
따라서 수직갭2, 수평 갭2가 됨.

수직갭이 2니까 무조건 수직으로 2회는 움직여야 함.
근데 여기서 그냥 무조건 대각으로 움직임.
그럼 result = 수직갭 * 3이 됨.

대각으로 움직였기 때문에 대각 1회당 수평갭 1회도 변경이 됨.
따라서 수평갭 - 수직갭을 함.

만약에 수평갭 - 수직갭이 0이면 값을 변경할 필요가 없음.
근데 수평갭 - 수직갭이 0이 아니라 -거나 +면 값을 수정할 필요가 생김.

1, 8로 예를 들면
수직갭 2, 수평갭 1임
수직갭 2만큼 움직이면 result에 6이 들어감.
수평갭 - 수직갭을 해보면 -1이 나옴.
이 말은 즉, 한 번은 대각이 아니라 상하로 움직이면 됐는데 대각으로 움직였다는 말이고, 따라서 대각이동과 상하 이동차이 1을 빼줌.
(여기서 1을 빼는 이유는 -1이니까 1번만큼 필요없이 대각으로 움직였기 때문임)
(만약 -2라면 -2를 빼면 됨. 이 케이스는 0에서 1케이스.)

다른 케이스로
1, 6로 예를 들면
수직갭 1, 수평갭 2임
수직갭이 1이므로 1만큼 움직이니까 result = 3이 들어감.
이제 수평갭 - 수직갭을 해보면 +1임.
이 말은 아직 수평갭만큼 움직여야 한다임.
따라서 좌우으로 한 번 이동 시켜야 하므로 +2를 해서 5가 됨.

여기까지가 이동하는 값을 계산 하는 것.

DP 알고리즘은 이전 값으로 다음 값을 계산하는 것임.
정확히는 이전 손가락 위치에서 이번 손가락 위치.

dp[n][left][right]로 표현할 수 있음.
n은 현재 숫자의 위치를 나타냄.
left는 왼손, right는 오른손.
dp의 모든 값은 Integer.MAX_VALUE로 초기화 함.
그리고 dp[0][4][6] = 0임.
왜? 시작 위치는 항상 왼손4, 오른손6이니까

1756을 기준으로 돌린다고 하면
1을 눌러야 함.
첫번째니까 n == 1임.
이러면
left가 1이거나, right가 1인 케이스에 값을 갱신해야 함.
여기서 2중반복문을 돌림.
int i = 0 -> 11까지, int j = 0 -> 11까지
(12인 이유는 0을 11로 치환했기 때문이고, *은 눌릴 일이 없기 때문에 i나 j가 10이면 패스)
(그리고 오른손 왼손이 같은 위치에 올라올 수 없기 때문에 i == j면 패스)

여기서 dp[n-1][i][j]가 Integer.MAX_VALUE면 패스함.
(맨 처음 케이스는 dp[0][4][6]을 제외하면 전부 Integer.MAX_VALUE이라서 패스임)

그러면 다시 num == 1이고, i == 4, j == 6에서 패스하지 않고 점검함.
dp[1][i][num]은 오른손을 움직이는 케이스,
dp[1][num][j]은 왼손을 움직이는 케이스임.

따라서
dp[1][4][1] = Math.min(dp[1][4][1], dp[0][4][6] + 이전 오른손 6에서 이번 목표 1로 이동하는 값) 
dp[1][1][6] = Math.min(dp[1][1][6], dp[0][4][6] + 이전 왼손 4에서 이번 목표 1로 이동하는 값) 
이렇게 dp를 구하면 됨
*/

class Solution {
    public int solution(String numbers) {
        // 숫자 0을 11로 치환하기 위해서 잡음.
        // numbers.length+1은 최초 케이스 4, 6을 쓰기 위함.
        int[][][] dp = new int[numbers.length()+1][12][12];
        // dp 초기화
        for(int i = 0; i < dp.length; i++) {
            for(int j = 0; j < dp[i].length; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        dp[0][4][6] = 0;
        
        return click(numbers.split(""), dp);
    }
    
    public int click(String[] nums, int[][][] dp) {
        int index = 1;
        int result = Integer.MAX_VALUE;
        
        for(int k = 0; k < nums.length; k++) {
            int num = 0;
            
            // 숫자 치환인데 사실 0만 따지면 되는데 혹시 몰라서 그냥 다 따짐.
            if(nums[k].equals("*")) {
                num = 10;
            } else if(nums[k].equals("0")) {
                num = 11;
            } else if(nums[k].equals("#")) {
                num = 12;
            } else {
                num = Integer.parseInt(nums[k]);
            }
            
            for(int i = 0; i < 12; i ++) {
                for(int j = 0; j < 12; j++) {
                    // *거나 왼손 오른손이 같은 위치에 올라가는 경우는 패스
                    if(i == 10 || j == 10 || (i == j)) {
                        continue;
                    }
                    
                    // 이전값이 사용할 수 없는 값이면 패스
                    int preValue = dp[index-1][i][j];
                    if(preValue == Integer.MAX_VALUE) {
                        continue;
                    }
                    
                    // 오른손을 타켓으로 움직이는 케이스
                    dp[index][i][num] = Math.min(dp[index][i][num], preValue + checkMoving(j, num));
                    // 왼손을 타켓으로 움직이는 케이스
                    dp[index][num][j] = Math.min(dp[index][num][j], preValue + checkMoving(i, num));
                    
                    if(k == nums.length-1) {
                        // 마지막 반복일 때, 가장 작은 값을 구하기 위함
                        result = Math.min(result, Math.min(dp[index][i][num], dp[index][num][j]));
                    }
                }
            }
            index++;
        }
        
        return result;
    }
    
    // 움직이는 방식은 맨 위에 주석 확인
    public int checkMoving(int position, int target) {
        int result = 0;
        int positionVertical = position / 3;
        int targetVertical = target / 3;
        int positionHorizon = position % 3;
        int targetHorizon = target % 3;
        
        positionVertical = position % 3 != 0 ? positionVertical+1 : positionVertical;
        targetVertical = target % 3 != 0 ? targetVertical+1 : targetVertical;
        positionHorizon = positionHorizon == 0 ? 3 : positionHorizon;
        targetHorizon = targetHorizon == 0 ? 3 : targetHorizon;
        
        int verticalGap = Math.abs(positionVertical - targetVertical);
        int horizonGap = Math.abs(positionHorizon - targetHorizon);
        if(verticalGap == 0 && horizonGap == 0) {
            return 1;
        } else if(verticalGap == 0 || horizonGap == 0) {
            result += verticalGap * 2;
            result += horizonGap * 2;
            return result;
        } else {
            result = verticalGap * 3;
            
            if(horizonGap - verticalGap < 0) {
                result -= Math.abs(horizonGap - verticalGap);
            } else if(horizonGap - verticalGap > 0) {
                result += 2;
            }
        }
        return result;
    }
}

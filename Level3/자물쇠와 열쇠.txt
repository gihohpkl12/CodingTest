/*
1. 열쇠를 돌리는 걸 우선 생각해야 됨.
2. 자물쇠 범위를 넓히는 것과 넓힐 범위 + 넓힌 범위에 기존의 자물쇠를 적용하는 걸 빨리 생각해야 함.
3. 그냥 완전 탐색으로 자물쇠 전체를 도는 게 편함.
*/
class Solution {
    public boolean solution(int[][] key, int[][] lock) {
        // 확장할 자물쇠 범위
        int[][] newLock = new int[lock.length + (key.length-1)*2][lock.length + (key.length-1)*2];
        boolean answer = false;
        int holeCount = 0;
        
        // 확장한 자물쇠에 기존의 자물쇠 적용 및 홈 개수 파악
        for(int i = 0; i < newLock.length; i++) {
            for(int j = 0; j < newLock.length; j++) {
                if(i >= key.length-1 && i <= newLock.length - key.length && j >= key.length-1 && j <= newLock.length - key.length) {
                    newLock[i][j] = lock[i - key.length+1][j - key.length+1];
                    holeCount = newLock[i][j] == 0 ? holeCount+1 : holeCount;
                } else {
                    newLock[i][j] = 2;
                }
            }
        }

        // 처음부터 자물쇠에 홈이 없는 경우
        if(holeCount == 0) {
            return true;
        }
        
        // 0도 90도 180도 270도 체크
        for(int i = 0; i < 4; i++) {
            // 완전탐색
            for(int x = 0; x <= newLock.length - key.length; x++) {
                for(int y = 0; y <= newLock.length - key.length; y++) {
                    if(match(x, y, key, newLock, holeCount)) {
                        return true;
                    }
                }
            }
            key = turn(key);
        }
        return answer;
    }
    
    public boolean match(int startX, int startY, int[][] key, int[][] lock, int holeCount) {
        int keyXIndex = 0, keyYIndex = 0;
        
        // 키 범위 만큼 돌림.
        for(int i = startX; i < startX + key.length; i++) {
            for(int j = startY; j < startY + key.length; j++) {
                if(lock[i][j] == 0) {
                    if(key[keyXIndex][keyYIndex] == 1) {
                        holeCount--;
                    } else {
                        return false;
                    }
                } else if(lock[i][j] == 1) {
                    if(key[keyXIndex][keyYIndex] == 1) {
                        return false;
                    }
                }
                keyYIndex++;
            }
            keyXIndex++;
            keyYIndex = 0;
        }
        
        return holeCount == 0 ? true : false;
    }

    public int[][] turn(int[][] key) {
        int[][] turnKey = new int[key.length][key[0].length];
        for(int i = 0; i < key.length; i++) {
            for(int j = 0; j < key.length; j++) {
                turnKey[i][j] = key[key.length-1 -j][i];
            }
        }
        return turnKey;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
   	
		static int zero_count =0;
		public boolean solution(int[][] key, int[][] lock) {
	        boolean answer = false;
	        int[][] new_lock = expend_lock(lock,key.length-1);
	        if(zero_count==0)
            {
                return true;
            }
	        for(int t =0; t<4; t++ )
	        {
	        	 boolean answer2 = new_search(key,new_lock,lock.length);
	        	 if(answer2==false)
	        	 {
	        		 key = turning(key);

	        	 }else if(answer2==true)
	        	 {
	        		 answer = answer2;
	        		 break;
	        	 }
	        }

	        return answer;
	    }
		public static boolean new_search(int[][] key, int[][] lock, int origin_length)
		{
			boolean result = true;
			int W_start =0;
			int H_start =0;
			
			while(true)
			{
				if(H_start == lock.length-(key.length-1))
				{
                    result = false;
					break;
				}else
				{
					int[] temp_range = {W_start, H_start};
					result = put_key(key,lock,temp_range);
					if(result == true)
					{
						break;
					}
					else
					{
						int[] temp_index = next_index(W_start, H_start, lock.length, key.length);
						W_start = temp_index[0];
						H_start = temp_index[1];
					}
							
				}
			}
			
			return result;
		}
		public static int[] next_index(int start_w, int start_h, int lock_length, int key_length)
		{

			int W_start =start_w;
			int H_start =start_h;
			int[] index_arr = new int[2];
			if(start_w<=lock_length-key_length && start_h<=lock_length-key_length )
			{
				
				if(start_w<lock_length-(key_length))
				{
					W_start++;
				}else if(start_w==lock_length-(key_length))
				{
					
					W_start =0;
					H_start ++;
				}
			}	
			
			index_arr[0] = W_start;
			index_arr[1] = H_start;
			return index_arr;
		}
		// put key is complete!
		public static boolean put_key(int[][] key, int[][] lock, int[] range)
		{
			int start_w =range[0];
			int start_h =range[1];
			int end_w = start_w+key.length;
			int end_h = start_h+key.length;
			int key_index_w =0;
			int key_index_h =0;
			boolean state = true;
			boolean final_answer = false;
			int zero =0;
			boolean zero_state = false;
			
			for(int i=start_h; i<end_h; i++)
			{
				for(int j= start_w; j<end_w; j++)
				{
					if(lock[i][j]+key[key_index_h][key_index_w]==2)
					{
						
						state = false;
						break;
					}
					if(lock[i][j]==0 && lock[i][j]+key[key_index_h][key_index_w]==1)
					{
						zero++;
						if(zero==zero_count)
						{
							zero_state = true;
						}
					}
					key_index_w++;
				}
				key_index_h++;
				key_index_w = 0;
				if(state == false)
				{
					break;
				}
				if(state == true && zero_state==true && zero == zero_count)
				{
					final_answer = true;
				}
			}
			return final_answer;
		}
		// turning is complete
		public static int[][] turning(int[][] key)
		{
			int[][] new_key = new int[key.length][key[0].length];
			int h_index =0;
			int w_index =0;
			for(int i=0;i<key[0].length; i++)
			{
				for(int j=key.length-1;j>=0;j--)
				{
					new_key[h_index][w_index] = key[j][i]; 
					w_index++;
				}
				w_index =0;
				h_index++;
			}
			
			return new_key;
			
		}
		// expend_lock is complete
		public static int[][] expend_lock(int[][] lock, int add)
		{
			int[][] new_lock = new int[lock.length+(add*2)][lock[0].length+(add*2)];
			int h_index =0;
			int w_index =0;
			for(int i=0; i<new_lock.length; i++)
			{
				for(int j=0; j<new_lock[0].length; j++)
				{
					
					if(i>=add && i<lock.length+add && j>=add && j<lock.length+add)
					{
						// this is origin place
						new_lock[i][j] = lock[h_index][w_index];
						if(lock[h_index][w_index]==0)
						{
							zero_count++;
						}
						w_index++;
					}else
					{
						// 3 is adding place 
						new_lock[i][j] = 3;
					}
				}
				if(i>=add && i<lock.length+add )
				{
					h_index++;
				}
				w_index=0;
			}
			return new_lock;
		}
}

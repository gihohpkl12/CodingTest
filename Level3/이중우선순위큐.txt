import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Collections;
import java.util.ArrayList;
/*
작은 거, 큰 거 우선으로 정렬하는 PriorityQueue를 따로 만들고,
각각에 다 추가함.
제거할 때는 큰 놈, 작은 놈에서 제거하고, 큰 놈을 제거하라고 하면 큰 놈에서 poll한 값을 작은 놈에서 제거해야 서로 수가 일치함

아니면 이분 탐색으로 저장할 위치를 찾고, 해당 값에 넣으면 ArrayList 하나로 가능함.
*/

class Solution {
    public int[] solution(String[] operations) {
        int[] answer = {0,0};
        ArrayList<Integer> doubleQ = new ArrayList<>();
        
        for(String command : operations) {
            if(command.charAt(0) == 'I') {
                // System.out.println("add "+Integer.parseInt(command.substring(2, command.length())));
                
                if(doubleQ.size() > 0) {
                    int index = findInsertIndex(doubleQ, Integer.parseInt(command.substring(2, command.length())));
                    doubleQ.add(index, Integer.parseInt(command.substring(2, command.length())));    
                } else {
                    doubleQ.add(Integer.parseInt(command.substring(2, command.length())));
                }
            } else {
                if(command.charAt(2) == '-' && doubleQ.size() > 0) {
                    doubleQ.remove(0);
                    // System.out.println("delete first");
                } else if(command.charAt(2) != '-' && doubleQ.size() > 0) {
                    doubleQ.remove(doubleQ.size()-1);
                    // System.out.println("delete end");
                }
            }
            
            // for(int a : doubleQ) {
            //     System.out.print(a+" ");
            // }
            // System.out.println();
        }
        // for(int a : doubleQ) {
        //         System.out.print(a+" ");
        //     }
        //     System.out.println();
        
        answer[0] = doubleQ.size() > 0 ? doubleQ.get(doubleQ.size()-1) : answer[0];
        answer[1] = doubleQ.size() > 0 ? doubleQ.get(0) : answer[1];
        return answer;
    }
    
    public int findInsertIndex(ArrayList<Integer> doubleQ, int num) {
        int result = 0, max = doubleQ.size(), min = 0;
        
        while(min <= max) {
            // System.out.println("  check middle "+max+" "+min +" "+result);
            result = (max+min)/2;
            
            if(result == 0) {
                return doubleQ.get(0) > num ? 0 : 1;
            } else if(result == doubleQ.size()) {
                return doubleQ.get(result-1) > num ? result-1 : result;
            }
            
            if(doubleQ.get(result) < num) {
                // System.out.println("   big "+max+" "+min);
                min = result +1;
            } else if(doubleQ.get(result) > num) {
                // System.out.println("   small "+max+" "+min);
                max = result -1;
            } else {
                break;
            }
        }
        
        // System.out.println("return "+max+" "+min +" "+result);
        return result;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------

import java.util.PriorityQueue;
import java.util.Collections;

/*
작은 거, 큰 거 우선으로 정렬하는 PriorityQueue를 따로 만들고,
각각에 다 추가함.
제거할 때는 큰 놈, 작은 놈에서 제거하고, 큰 놈을 제거하라고 하면 큰 놈에서 poll한 값을 작은 놈에서 제거해야 서로 수가 일치함
*/
class Solution {
    public int[] solution(String[] operations) {
        PriorityQueue<Integer> minOrderQ = new PriorityQueue<>();
        PriorityQueue<Integer> maxOrderQ = new PriorityQueue<>(Collections.reverseOrder());
        
        int[] answer = new int[2];
        
        for(String operation : operations) {
            if(operation.charAt(0) == 'I') {
                int num = Integer.parseInt(operation.substring(2, operation.length()));
                minOrderQ.add(num);
                maxOrderQ.add(num);
            } else if(operation.equals("D 1") && maxOrderQ.size() != 0) {
                int num = maxOrderQ.poll();
                minOrderQ.remove(num);
            } else if(operation.equals("D -1") && minOrderQ.size() != 0) {
                int num = minOrderQ.poll();
                maxOrderQ.remove(num);
            }
        }
        
        answer[0] = maxOrderQ.size() != 0 ? maxOrderQ.poll() : 0;
        answer[1] = minOrderQ.size() != 0 ? minOrderQ.poll() : 0;
        return answer;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
import java.util.PriorityQueue;
import java.util.ArrayList;
class Solution {
    public int[] solution(String[] operations) {
        int[] answer = {0,0};
        PriorityQueue<Integer> Q = new PriorityQueue<>();
        for(String i : operations)
        {
            if(i.substring(0,1).equals("I"))
                Q.offer(Integer.parseInt(i.replace("I","").replace(" ", "")));
            else if(i.equals("D -1"))
            {
                if(Q.size()!=0)
                	Q.poll();
            }else if(i.equals("D 1"))
            {
                if(Q.size()!=0)
                	max(Q);
            }
        }
        if(Q.size()>1)
        {
            answer[0] = max(Q)+1;
            answer[1] = Q.poll();
        }else if(Q.size()==1)
        {
            int num = Q.poll();
            if(num>0)
                answer[0] = num;
            else
                answer[1] = num;
        }
        return answer;
    }
    public int max(PriorityQueue<Integer> Q)
    {
    	int max = Q.size();
    	ArrayList<Integer> list = new ArrayList<>();
    	while(Q.size()!=0)
    	{
    		if(max==1)
    			max = Q.poll();
    		else
    			list.add(Q.poll());
    		max--;
    	}
    	Q.addAll(list);
    	return max;
    }
}

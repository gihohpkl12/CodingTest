import java.util.Stack;

class Solution {
    public String solution(int n, int k, String[] cmd) {
        Stack<Integer> remove = new Stack<>();
        int cur = k, max = n;

        for(int i = 0; i < cmd.length; i++) {
            if(cmd[i].charAt(0) == 'U') {
                cur -= Integer.parseInt(cmd[i].substring(2, cmd[i].length()));
            } else if(cmd[i].charAt(0) == 'D') {
                cur += Integer.parseInt(cmd[i].substring(2, cmd[i].length()));
            } else if(cmd[i].charAt(0) == 'C') {
                remove.add(cur);
                max--;
                cur = cur == max ? cur -1 : cur;
            } else if(cmd[i].charAt(0) == 'Z') {
                int recover = remove.pop();
                max++;
                cur = recover <= cur ? cur +1 : cur; 
            }
        }
        
        StringBuffer answer = new StringBuffer();
        for(int i = 0; i < max; i++) {
            answer.append("O");
        }
        
        while(remove.size() != 0) {
            answer.insert(remove.pop(), "X");
        }
        
        return answer.toString();
    }
}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

/*
그래프라고 하는데 나는 그냥 구현 문제로 생각함.
승패를 기록함.
내가 이긴 애들은 내가 패배한 애들한테 짐.
내가 진 애들은 내가 이긴 애들을 이김.
이 법칙을 기준으로 승패가 n-1 이면 순위를 매길 수 있음.
*/
class Solution {
    public int solution(int n, int[][] results) {
        int answer = 0;
        HashMap<Integer, Player> playerManagement = new HashMap<>();
        
        for(int i = 1; i <= n; i++) {
            playerManagement.put(i, new Player(i));
        }
        
        // 승패 기록
        for(int i = 0; i < results.length; i++) {
            int winner = results[i][0], loser = results[i][1];
            playerManagement.get(winner).win.add(loser);
            playerManagement.get(loser).lose.add(winner);
        }
        
        for(int i = 1; i <= n; i++) {
            Player curPlayer = playerManagement.get(i);
            
            // 현재 선수가 이겼던 애들한테 현재 플레이어가 패배한 선수들을 추가해줌
            // 내가 이긴 애들은 내가 진 애들한테 진다.
            for(int j : curPlayer.win) {
                for(int loser : curPlayer.lose) {
                    playerManagement.get(j).lose.add(loser);
                }
            }
            
            // 현재 선수가 졌던 애들한테 현재 플레이어가 이겼던 선수들을 추가해줌.
            // 내가 진 애들은 내가 이긴 애들을 이긴다.
            for(int j : curPlayer.lose) {
                for(int winner : curPlayer.win) {
                    playerManagement.get(j).win.add(winner);
                }
            }
        }
        
        // 승패 기록 체크
        for(int i = 1; i <= n; i++) {
            // System.out.println(i+" win "+playerManagement.get(i).win.toString());
            // System.out.println(i+" lose "+playerManagement.get(i).lose.toString());
            answer = playerManagement.get(i).win.size() + playerManagement.get(i).lose.size() == n-1 ? answer +1 : answer;
        }
        return answer;
    }
    
    class Player {
        int num;
        HashSet<Integer> win;
        HashSet<Integer> lose;
        
        public Player(int num) {
            this.num = num;
            this.win = new HashSet<>();
            this.lose = new HashSet<>();
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Queue;
import java.util.LinkedList;

class Solution {
   public int solution(int n, int[][] results) {
        int answer = 0;
        ArrayList<PlayRecord> playRecord = new ArrayList<>(); 
        
        for(int i = 0; i <= n; i++) {
        	playRecord.add(new PlayRecord());
        }
        
	// 승패 초기화
        for(int i = 0; i < results.length; i++) {
        	PlayRecord winner = playRecord.get(results[i][0]);
        	PlayRecord loser = playRecord.get(results[i][1]);
        	winner.win.put(results[i][1], 0);
        	loser.lose.put(results[i][0], 0);
        }
        
	// 승패 비교 및 answer 체크
        for(int i = 1; i <= n; i++) {
        	PlayRecord player = playRecord.get(i);
        	recordCheck(player, playRecord, n);
        	
        	if(player.lose.size() + player.win.size() == n-1) {
        		answer++;
        	}
        }
        return answer;
    }
	
	public void recordCheck(PlayRecord player, ArrayList<PlayRecord> playRecord, int n) {
		boolean[] checkForWin = new boolean[n+1];
		boolean[] checkForLose = new boolean[n+1];
		Queue<Integer> recordCheckQueue = new LinkedList<>();
		
		for(int key : player.win.keySet()) {
			recordCheckQueue.add(key);
			checkForWin[key] = true;
		}
		
		// 본인(= player)이 이긴 선수가 이겼던 다른 선수는 본인(= player)도 이김.
		while(recordCheckQueue.size() > 0) {
			PlayRecord checkPlayer = playRecord.get(recordCheckQueue.poll());
			
			for(int playerNum : checkPlayer.win.keySet()) {
				if(!checkForWin[playerNum]) {
					checkForWin[playerNum] = true;
					player.win.put(playerNum, 0);
					recordCheckQueue.add(playerNum);
				}
			}
		}
		
		for(int key : player.lose.keySet()) {
			recordCheckQueue.add(key);
			checkForLose[key] = true;
		}
		
		// 본인(= player)이 진 선수가 패배했던 다른 선수는 본인(= player)도 짐.
		while(recordCheckQueue.size() > 0) {
			PlayRecord checkPlayer = playRecord.get(recordCheckQueue.poll());
			
			for(int playerNum : checkPlayer.lose.keySet()) {
				if(!checkForLose[playerNum]) {
					checkForLose[playerNum] = true;
					player.lose.put(playerNum, 0);
					recordCheckQueue.add(playerNum);
				}
			}
		}
	}
	
	 class PlayRecord {
		 HashMap<Integer, Integer> win, lose;
		 
		 public PlayRecord() {
			 this.win = new HashMap<>();
			 this.lose = new HashMap<>();
		 }
	 }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
class Solution {
    public int solution(int n, int[][] results) {
        int answer = 0;
        HashMap<Integer, ArrayList<Integer>> winIndex = new HashMap<>();
        HashMap<Integer, ArrayList<Integer>> loseIndex = new HashMap<>();
        HashMap<Integer, ArrayList<Integer>> win = new HashMap<>();
        HashMap<Integer, ArrayList<Integer>> lose = new HashMap<>();
        
        for(int i = 0; i < results.length; i++)
        {
        	int winner = results[i][0], loser = results[i][1];
        	Index(winIndex, winner, i);
        	Index(loseIndex, loser, i);
        }
        for(int i =0; i< results.length; i++)
        {
        	int winner = results[i][0], loser = results[i][1];
        	add(win, winner, loser);
        	add(lose, loser, winner);
        	findWin(results, win, winIndex,winner, winIndex.get(loser));
        	findLose(results, lose , loseIndex, loser, loseIndex.get(winner));
        }
        for(int i=1; i<=n; i++)
        {
        	int winCount = win.containsKey(i)==true ? win.get(i).size() : 0, loseCount = lose.containsKey(i)==true ? lose.get(i).size() : 0;
        	if(winCount+loseCount == n-1)
        		answer++;
        }
        
        return answer;
    }
	public void findWin(int[][] results, HashMap<Integer, ArrayList<Integer>> win, HashMap<Integer, ArrayList<Integer>> winIndex, int key, ArrayList<Integer> movelist )
	{
		if(movelist==null)
			return;
		ArrayList<Integer> newMoveList = new ArrayList<>();
		ArrayList<Integer> temp = win.get(key);
		
		for(int i : movelist)
		{
			if(!temp.contains(results[i][1]))
			{
				temp.add(results[i][1]);
				if(winIndex.get(results[i][1])!=null)
					newMoveList.addAll(winIndex.get(results[i][1]));
			}
		}
		win.replace(key, temp);
		if(newMoveList.size()!=0)
			findWin(results, win, winIndex,key, newMoveList);
	}
	
	public void findLose(int[][] results, HashMap<Integer, ArrayList<Integer>> lose, HashMap<Integer, ArrayList<Integer>> loseIndex, int key, ArrayList<Integer> movelist )
	{
		if(movelist==null)
			return;
		ArrayList<Integer> newMoveList = new ArrayList<>();
		ArrayList<Integer> temp = lose.get(key);
		
		for(int i : movelist)
		{
			if(!temp.contains(results[i][0]))
			{
				temp.add(results[i][0]);
				if(loseIndex.get(results[i][0])!=null)
					newMoveList.addAll(loseIndex.get(results[i][0]));
			}
		}
		lose.replace(key, temp);
		if(newMoveList.size()!=0)
			findLose(results, lose, loseIndex,key, newMoveList);
	}
	
	public void Index(HashMap<Integer, ArrayList<Integer>> map, int key, int index)
	{
		if(map.containsKey(key))
		{
			ArrayList<Integer> temp = map.get(key);
			temp.add(index);
			map.replace(key, temp);
		}
		else
		{
			ArrayList<Integer> temp = new ArrayList<Integer>();
			temp.add(index);
			map.put(key,temp);
		}
	}
	public void add(HashMap<Integer, ArrayList<Integer>> map, int key, int value)
	{
		if(map.containsKey(key))
    	{
    		ArrayList<Integer> temp = map.get(key);
    		if(!temp.contains(value))
    			temp.add(value);
    		map.replace(key, temp);
    	}
    	else
    	{
    		ArrayList<Integer> temp = new ArrayList<>();
    		if(!temp.contains(value))
    			temp.add(value);
    		map.put(key, temp);
    	}
	}
}

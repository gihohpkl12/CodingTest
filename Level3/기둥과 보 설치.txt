import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;

class Solution {
 public int[][] solution(int n, int[][] build_frame) {
		 int[][] answer= {};
		 ArrayList<int[]> building = new ArrayList<>(); 
		 for(int i=0; i<build_frame.length; i++)
		 {
			 if(build_frame[i][3]==1)
			 {
				 boolean check = check_build(build_frame[i],building);
				 if(check)
				 {
					 build(build_frame[i],building);
				 }
			 }else
			 {
				 boolean check = check_remove(build_frame[i],building);
				 if(check)
				 {
					 build(build_frame[i],building);
				 }
			 }
		 }
		 
		 Collections.sort(building, new Comparator<int[]>() {
     		public int compare(int[] o1, int[] o2)
     		{
     			if(o1[0]==o2[0])
     			{
     				if(o1[1]==o2[1])
     				{
     					if(o1[2]<o2[2])
     					{
     						return -1;
     					}else 
     					{
     						return 1;
     					}
     				}else if(o1[1] < o2[1])
     				{
     					return -1;
     				}else
     				{
     					return 1;
     				}
     			}else if(o1[0]<o2[0])
     			{
     				return -1;
     			}
     			else if(o1[0]>o2[0])
     			{
     				return 1;
     			}
     			return 0;
     		}
     	});
     	answer = new int[building.size()][];
    	 for(int q =0; q<building.size(); q++)
     	{
    		 	answer[q] = building.get(q);
     	}
     	
		 
    	// System.out.println("building size "+building.size());

    	
		 return answer;
	}
	public static boolean check_build(int[] order, ArrayList<int[]> building )
	{
		boolean possible = false;
		int x = order[0], y = order[1], t = order[2];
		int x1 , y1 , t1;
		
		if(order[2] == 0)
		{
			// pillar build case
			if(order[3] == 1)
			{
				if(order[1] == 0)
				{
					return true;
				} else
				{
					for(int i=0; i<building.size(); i++)
					{
						x1 = building.get(i)[0]; y1 = building.get(i)[1]; t1 = building.get(i)[2];
						// 기둥 바로 아래 기둥 || 기둥 지을 위치에 판 || 기둥 지을 위치 한칸 뒤에 판
						if((x1 == x && y1 == y-1 && t1 == 0) || (x1 == x && y1 == y && t1 == 1) || (x1==x-1 && y1 == y && t1 == 1))
						{
							return true;
						}
					}
				}
			}
		}
		else if(order[2] == 1)
		{
			// board build case
			if(order[3] == 1)
			{
				boolean c1 = false, c2 = false;
				
				for(int i=0; i<building.size(); i++)
				{
					x1 = building.get(i)[0]; y1 = building.get(i)[1]; t1 = building.get(i)[2];
					// 판 바로 아래 기둥 || 판 아래, 판 끝에 기둥
					if((x1 == x && y1 == y-1 && t1 == 0) || (x1 == x+1 && y1 == y-1 && t1 == 0))
					{
						return true;
					// 양쪽이 판으로 연결
					}else if((x1 == x-1 && y1==y && t1 == 1) )
					{
						
						c1 = true;
					}else if(x1 == x+1 && y1 == y && t1 == 1)
					{
					
						c2 = true;
					}
					if(c1 && c2)
					{
						return true;
					}	
				}
			}
		}
		return possible;
	}
	
	
	public static boolean check_remove(int[] order, ArrayList<int[]> building)
	{
		boolean possible = false;
		ArrayList<int[]> temp_building = new ArrayList<>();
		int[] temp_order = new int[4];
		int x = order[0], y = order[1], t = order[2];
		int x1, y1, t1;
		int e_x, e_y, e_t ;
		//System.out.println("this building want to remove "+x+" "+y+" "+t);
		if(order[2] == 0)
		{
			for(int i=0; i<building.size(); i++)
			{
				x1 = building.get(i)[0]; y1 = building.get(i)[1]; t1 = building.get(i)[2];
				// 기둥 바로 위에 판 || 기둥 위 한칸 뒤에 판 || 기둥 바로 위에 기둥
				if((x1 == x && y1 == y+1 && t1 == 1) || (x1 == x-1 && y1 == y+1 && t1 == 1) || (x1 == x && y1 == y+1 && t1 == 0))
				{
					temp_order[0] = x1; temp_order[1] = y1; temp_order[2] = t1; temp_order[3] = 1;
					//System.out.println("case start "+x1+" "+y1+" "+t1);
					for(int j =0; j< building.size(); j++)
					{
						e_x = building.get(j)[0]; e_y = building.get(j)[1]; e_t = building.get(j)[2];
						if((e_x==x && e_y == y && e_t == t) || (e_x==x1 && e_y == y1 && e_t == t1))
						{
							//System.out.println("can`t building"+e_x+" "+e_y+" "+e_t);
							continue;
							
						}else
						{
							//System.out.println("temp_building "+e_x+" "+e_y+" "+e_t);
							temp_building.add(building.get(j));
						}
					}
					boolean check = check_build(temp_order, temp_building);
					//System.out.println("case end "+x1+" "+y1+" "+t1+" result "+check);
					if(check==false)
					{
						possible = false;
						break;
					}else
					{
						possible = true;
					}
				}else
				{
					possible = true;
				}
			
			}
			return possible;
		}
		else if(order[2] == 1)
		{
			for(int i=0; i<building.size(); i++)
			{
				x1 = building.get(i)[0]; y1 = building.get(i)[1]; t1 = building.get(i)[2] ;
				
				if((x1 == x&& y1 == y && t1 ==0) || (x1 == x+1 && y1 == y && t1 ==0) || (x1 == x-1 && y1 == y && t1 ==1) || (x1 == x+1&& y1 == y && t1 ==1))
				{
					//System.out.println("case start(board) "+x1+" "+y1+" "+t1);
					temp_order[0] = x1; temp_order[1] = y1; temp_order[2] = t1; temp_order[3] = 1;
					for(int j =0; j< building.size(); j++)
					{
						e_x = building.get(j)[0]; e_y = building.get(j)[1]; e_t = building.get(j)[2];
						if((e_x==x && e_y == y && e_t == t) || (e_x==x1 && e_y == y1 && e_t == t1))
						{
							//System.out.println("can`t building"+e_x+" "+e_y+" "+e_t);
							continue;
						}else
						{
							//System.out.println("temp_building "+e_x+" "+e_y+" "+e_t);
							temp_building.add(building.get(j));
						}
					}
					boolean check = check_build(temp_order, temp_building);
					//System.out.println("case end(borad) "+x1+" "+y1+" "+t1+" result "+check);
					if(check==false)
					{
						possible = false;
						break;
					}else
					{
						possible = true;
					}
					
				}
				else
				{
					possible = true;
				}
				
			}
		}
		return possible;
	}
	public static void build(int[] order,  ArrayList<int[]> building)
	{
		if(order[3]==0)
		{
			int x = order[0], y = order[1], t = order[2]; 
			int x1, y1, t1;
			for(int i =0; i<building.size(); i++)
			{
				x1 = building.get(i)[0]; y1 = building.get(i)[1]; t1 = building.get(i)[2];
				if(x1 == x && y1 == y && t1 == t)
				{
					building.remove(i);
					break;
				}
			}
		}
		else if(order[3] == 1)
		{
			int[] temp = new int[3];
			temp[0]=order[0]; temp[1]=order[1]; temp[2]=order[2];
			building.add(temp);
		}
	}
}
/*
진짜 쉬운 문제.

곱이 언제 제일 커지냐면 숫자들의 차이가 제일 적을 때 큼.
n = 2, s = 8를 예시로 보면
1,7 = 7
2,6 = 12
3,5 = 15
4,4 = 16

고로 s를 n으로 나눈 숫자를 배열에 다 넣고,
나머지 만큼을 뒤에서 부터 순서대로 넣어주면 됨

s가 n보다 작으면 문제 자체가 성립이 안 됨. -1 리턴.

*/
class Solution {
    public int[] solution(int n, int s) {
        int[] answer = new int[n];
        
        // -1 조건.
        if(s < n) {
            return new int[] {-1};
        }
        
        int count = s%n;
        for(int i = answer.length-1; i >= 0; i--) {
            // 나눈 값 저장.
            answer[i] = s/n;
            // 나머지가 남아있으면 1씩 넣어줌.
            answer[i] = count > 0 ? answer[i]+1 : answer[i];
            count--;
        }    
        
        return answer;
    }
}

------------------------------------------------------------------------------------

class Solution {
    public int[] solution(int n, int s) {
	        int[] answer = new int[n];
	        int average = s/n, rest = s%n;
	        if(s<n)
	        	return new int[] {-1};
	        for(int i =0; i< answer.length; i++)
	        	answer[i] = average;
	        int index = answer.length-1;
	        for(int i = 0; i<rest; i++)
	        {
	        	answer[index]+=1;
	        	index--;
	        }
	        return answer;
	    }
}

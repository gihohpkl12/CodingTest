import java.util.ArrayList;
import java.util.HashMap;

/*
퍼즐을 구하기만 하면 되는 문제.
배열을 전체 돌면서 퍼즐에 해당하는 값(0, 1)을 만나면 dfs로 탐색함.
탐색한 부분은 값을 바꿈.

퍼즐을 구하는 원리는
좌표를 저장하는데, 저장할 때 x,y의 최대 최소를 각각 구함.
01
11
01
위로 설명하면
최대 최소에 따라 퍼즐의 모양 + 도형의 모양에 해당되는 0까지 구해짐.

이걸 이제 회전시켜서 0, 90, 180, 270를 구하면 됨.
회전은 규칙이 있음.
이전 도형의 
x = length-1 부터 0까지
y = 0부터 length-1까지 
배열을 원래 방식대로 돌면서 순서대로 넣으면 됨.
(배열의 크기는 이전 배열의 x,y 사이즈를 바꿔서 생성하면 됨.)

만들면 이걸 map에 도형 크기에 따라 저장.
(크기는 위에 예시 기준으로 4임)

이후에는 그냥 board 돌면서 똑같이 퍼즐 만들고,
table에서 구한 퍼즐(회전 포함)에서 같은 모양이 있는지 확인하면 됨.
*/
class Solution {
    public int solution(int[][] game_board, int[][] table) {
        HashMap<Integer, ArrayList<Puzzle>> tableMap = new HashMap<>();
        searchTable(table, tableMap);
        return searchBoard(game_board, tableMap);
    }
    
    public int searchBoard(int[][] board, HashMap<Integer, ArrayList<Puzzle>> map) {
        int result = 0;
        int changeNum = 2;
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(board[i][j] == 0) {
                    Puzzle puzzle = new Puzzle();
                    puzzle.setNum(changeNum);
                    puzzle.add(i, j);
                    board[i][j] = changeNum;
                    puzzle.setMinMax(i, j);
                    findPuzzle(i, j, board, 0, changeNum, puzzle);
                    puzzle.setFirstBoard();
                    changeNum++;
                    
                    // 같은 크기의 퍼즐에서 탐색
                    int size = puzzle.getSize();
                    if(map.containsKey(size)) {
                        ArrayList<Puzzle> puzzles = map.get(size);
                        
                        for(int k = 0; k < puzzles.size(); k++) {
                            Puzzle getPuzzle = puzzles.get(k);
                            boolean check = getPuzzle.checkSamePuzzle(puzzle.allDirectionsPos.get(0));
                            
                            // 일치하면 해당 퍼즐은 썼으므로 삭제.
                            if(check) {
                                result += puzzle.getSize();
                                puzzles.remove(k);
                                break;
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
    
    public void searchTable(int[][] table, HashMap<Integer, ArrayList<Puzzle>> map) {
        int changeNum = 2;
        for(int i = 0; i < table.length; i++) {
            for(int j = 0; j < table[i].length; j++) {
                if(table[i][j] == 1) {
                    Puzzle puzzle = new Puzzle();
                    puzzle.setNum(changeNum);
                    puzzle.add(i, j);
                    table[i][j] = changeNum;
                    puzzle.setMinMax(i, j);
                    findPuzzle(i, j, table, 1, changeNum, puzzle);
                    changeNum++;
                    // 최초 퍼즐 모양 저장
                    puzzle.setFirstBoard();
                    // 회전
                    puzzle.setAllDirBoard();
                    
                    if(map.containsKey(puzzle.getSize())) {
                        map.get(puzzle.getSize()).add(puzzle);
                    } else {
                        map.put(puzzle.getSize(), new ArrayList<Puzzle>());
                        map.get(puzzle.getSize()).add(puzzle);
                    }
                    
                }
            }
        }
        
    }
    
    // DFS로 탐색하는 부분
    public void findPuzzle(int x, int y, int[][] table, int num, int changeNum, Puzzle puzzle) {
        int[][] moving = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        for(int[] move : moving) {
            int nextX = x + move[0];
            int nextY = y + move[1];
            
            if(rangeCheck(nextX, nextY, table.length)) {
                if(table[nextX][nextY] == num) {
                    puzzle.add(nextX, nextY);
                    table[nextX][nextY] = changeNum;
                    puzzle.setMinMax(nextX, nextY);
                    findPuzzle(nextX, nextY, table, num, changeNum, puzzle);
                }
            }
        }
    }
    
    public boolean rangeCheck(int x, int y, int length) {
        if(x >= 0 && y >= 0 && x < length && y < length) {
            return true;
        }
        return false;
    }
    
    class Puzzle {
        int size;
        int num;
        int minX;
        int maxX;
        int minY;
        int maxY;
        ArrayList<int[][]> allDirectionsPos;
        ArrayList<int[]> pos;
        
        public Puzzle() {
            this.allDirectionsPos = new ArrayList<>();
            this.pos = new ArrayList<>();
            this.minX = Integer.MAX_VALUE;
            this.maxX = Integer.MIN_VALUE;
            this.minY = Integer.MAX_VALUE;
            this.maxY = Integer.MIN_VALUE;
        }
        
        // 모양이 같은지 확인
        public boolean checkSamePuzzle(int[][] puzzle) {
            boolean result = true;
            for(int i = 0; i < allDirectionsPos.size(); i++) {
                int[][] curPuzzle = allDirectionsPos.get(i);
                boolean curCheck = true;
                
                if(curPuzzle.length == puzzle.length && curPuzzle[0].length == puzzle[0].length) {
                    for(int k = 0; k < curPuzzle.length; k++) {
                        for(int j = 0; j < curPuzzle[0].length; j++) {
                            if(curPuzzle[k][j] != puzzle[k][j]) {
                                curCheck = false;
                                break;
                            }
                        }
                    }
                } else {
                    curCheck = false;
                }
                
                if(curCheck) {
                    result = true;
                    break;
                } else {
                    result = false;
                }
            }
            return result;
        }
        
        // 배열 크기 지정 && 인덱스 변환을 위해서 최대, 최소를 저장.
        public void setMinMax(int x, int y) {
            this.minX = Math.min(this.minX, x);
            this.maxX = Math.max(this.maxX, x);
            this.minY = Math.min(this.minY, y);
            this.maxY = Math.max(this.maxY, y);
        }
        
        public void add(int x, int y) {
            this.pos.add(new int[] {x, y});
            this.size++;
        }
        
        public void setNum(int num) {
            this.num = num;
        }
        
        public int getSize() {
            return this.size;
        }
        
        public void setFirstBoard() {
            // max - min 하면 해당 배열의 길이가 나오고, +1 해줘야 함.
            int[][] initBoard = new int[maxX - minX +1][maxY - minY +1];
            for(int[] temp : this.pos) {
                // 빼는 이유는 해당 퍼즐의 원래 좌표를 0,0부터 시작하는 좌표로 변환해야 함.
                // 테이블 1번을 기준으로
                // 맨 좌측 상단은 1,1로 시작함.
                // 이걸 저장할 때는 0,0으로 변환해야 하므로 모든 좌표에서 최소값 1,1을 빼주면 됨.
                initBoard[temp[0] - minX][temp[1] - minY] = 1;
            }
            allDirectionsPos.add(initBoard);
            setAllDirBoard();
        }
        
        // 회전하는 부분
        // 규칙에 따라서 값을 저장함.
        public void setAllDirBoard() {
            for(int k = 1; k <= 3; k++) {
                int[][] preBoard = allDirectionsPos.get(allDirectionsPos.size()-1);
                int[][] board = new int[preBoard[0].length][preBoard.length];
                int x = preBoard.length-1;
                int y = 0;
                
                for(int i = 0; i < board.length; i++) {
                    for(int j = 0; j < board[i].length; j++) {
                        board[i][j] = preBoard[x][y];
                        x--;
                    }
                    y++;
                    x = preBoard.length-1;
                }
                allDirectionsPos.add(board);
            }
        }
    }
}

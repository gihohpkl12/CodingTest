import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Collections;

/*
진짜 간단한 문제.
야근 지수가 제곱이기 때문에 큰 값을 작게 만들어야 야근 지수가 최소가 됨.

큰 값을 기준으로 정렬하는 pq를 만들고, 
거기서 1씩 줄여나가면 됨.
*/

class Solution {
    public long solution(int n, int[] works) {
        long answer = 0;
        // 이렇게 해도 됨. 기억.
        // PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        
        for(int work : works) {
            pq.add(work);
        }
        
        while(n > 0 && pq.size() > 0) {
            int work = pq.poll()-1;
            if(work > 0) {
                pq.add(work);
            }
            n--;
        }
        
        while(pq.size() > 0) {
            long num = (long)pq.poll();
            answer += num * num;
        }
        
        return answer;
    }
}

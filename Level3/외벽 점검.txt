import java.util.ArrayList;

/* 
외벽 순서는 굳이 모두 만들 필요가 없음.
최소 길이가 되는 곳부터 시작하면 됨.
외벽 아이디어는 외벽의 길이에 2배인 배열을 생성하고, +n만큼 더 넣으면 됨.
ex. 1 2 3, n = 12 이면 1 2 3 13 14 15.

친구의 경우는 모든 경우의 수를 전부 생성함.

외벽을 점검할 때, 친구의 길이가 다음 외벽과의 거리가 작거나 같을 경우에는 friend - curLength하고, 친구의 길이가 부족할 경우에는 새로운 친구를 받아서 friend에 넣으면 됨.
이걸 위에 외벽처럼 2배의 길이로 만들어서 생각해보면 어차피 직선을 탐색한다고 보면 됨.
*/

class Solution {
    static ArrayList<ArrayList<Integer>> friends;
    public int solution(int n, int[] weak, int[] dist) {
        friends = new ArrayList<>();
        int answer = Integer.MAX_VALUE, start = 0, minLength = Integer.MAX_VALUE;
        int[] checkPoint = new int[weak.length*2];
        createCase(dist, new ArrayList<Integer>());
        
        for(int i = 0; i < checkPoint.length; i++) {
            if(i <= weak.length-1) {
                checkPoint[i] = weak[i];    
            } else {
                checkPoint[i] = weak[i%weak.length]+n;
            }    
        }
        
        for(int i = 0; i < weak.length; i++) {
            int count = weak.length-1, curLength = 0, cur = i;
            
            while(count > 0) {
                curLength += (checkPoint[cur+1] - checkPoint[cur]);
                cur++;
                count--;
            }
            if(curLength < minLength) {
                minLength = curLength;
                start = i;
            }
        }
        //System.out.println(start);
        
        for(int i = 0; i < friends.size(); i++) {
            ArrayList<Integer> curCase = friends.get(i);
            int friend = getFriend(curCase), friendCount = 1;
            
            for(int j = start; j < start+weak.length-1; j++) {
                int curLength = checkPoint[j+1] - checkPoint[j];
                //System.out.println(friend+" "+friendCount);
                if(friend >= curLength) {
                    friend -= curLength;
                } else {
                    friend = getFriend(curCase);
                    if(friend == -1) {
                        friendCount = Integer.MAX_VALUE;
                        break;
                    }
                    friendCount++;
                }
            }
            //System.out.println(i+" "+friendCount);
            answer = friendCount < answer ? friendCount : answer;
        }
        answer = answer == Integer.MAX_VALUE ? -1 : answer;
        return answer;
    }
    
    public int getFriend(ArrayList<Integer> curCase) {
        if(curCase.size() == 0) {
            return -1;
        }
        
        int friend = curCase.get(0);
        curCase.remove(0);
        return friend;
    }
    
    public void createCase(int[] dist, ArrayList<Integer> curCase) {
        if(curCase.size() == dist.length) {
            ArrayList<Integer> save = new ArrayList<>();
            for(int i : curCase) {
                save.add(i);
            }
            
            friends.add(save);
            return;
        }
        
        for(int i = 0; i < dist.length; i++) {
            if(dist[i] == -1) {
                continue;
            }
            int cur = dist[i];
            curCase.add(cur);
            dist[i] = -1;
            createCase(dist, curCase);
            dist[i] = cur;
            curCase.remove(curCase.size()-1);
        }
    }
}

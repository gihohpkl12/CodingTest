import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;
class Solution {
    public int solution(int n, int[][] edge) {
        int answer = 0;
        ArrayList<int[]> list = new ArrayList<>();
        ArrayList<Integer> countlist = new ArrayList<>();
        Queue<node> Q = new LinkedList<>();
        boolean[] check = new boolean[n+1];
        for(int i =0; i< edge.length; i++)
        {
        	int[] temp = {edge[i][0],edge[i][1]};
        	list.add(temp);
        }
        Q.add(new node(1,0));
        countlist.add(0);
        while(Q.size()!=0 && list.size()!=0)
        {
        	node temp = Q.poll();
        	int Num = temp.num;
        	int Count = temp.count+1;
        	
        	if(countlist.size()-1<Count)
        		countlist.add(0);
        	int i =0;
        	while(i!=list.size())
        	{
            		int[] edges = list.get(i);
            		if(edges[0]==Num && !check[edges[1]] )
            		{
            			node temp2 = new node(edges[1],Count);
            			countlist.set(Count, countlist.get(Count)+1);
            			
            			Q.add(temp2);
            			check[edges[1]] = true;
            			list.remove(i);
            			i--;
            			//System.out.println("node "+edges[0]+" -> "+edges[1]);
            		}
            		else if(edges[1]==Num && !check[edges[0]] )
            		{
            			node temp2 = new node(edges[0],Count);
            			
            			countlist.set(Count, countlist.get(Count)+1);
            			Q.add(temp2);
            			check[edges[0]] = true;
            			list.remove(i);
            			i--;
            			//System.out.println("node "+edges[1]+" -> "+edges[0]);
            		}
            	i++;
        	}
        }
        answer = countlist.get(countlist.size()-2);
        return answer;
    }
	
	 class node
	 {
		 int num;
		 int count;
		 public node(int num, int count)
		 {
			 this.num = num;
			 this.count = count;
		 }
	 }
}
/*
Dp문제.
지금 값을 포함시킬 경우
이전의 값에서 안 더함 + 지금 값 vs 이전 값에서 더함

지금 값을 포함 안 시킬 경우
이전 값에서 안 더함 vs 이전 값에서 더 함.

++
문제가 원형이라는 조건 때문에 서로 범위가 다름.
고로, 
0 ~ 마지막 인덱스 -1 이랑
1 ~ 마지막 인덱스 조건으로 나눠서 계산해야 함.
*/
class Solution {
    public int solution(int sticker[]) {
        if(sticker.length == 1) {
            return sticker[0];
        }
        
        int[][] dpOne = new int[sticker.length][2];
        int[][] dpTwo = new int[sticker.length][2];
        
        dpOne[0][0] = sticker[0];
        for(int i = 1; i < sticker.length-1; i++) {
            dpOne[i][0] = dpOne[i-1][1] + sticker[i] > dpOne[i-1][0] ? dpOne[i-1][1] + sticker[i] :  dpOne[i-1][0];
            dpOne[i][1] = dpOne[i-1][0] > dpOne[i-1][1] ? dpOne[i-1][0] : dpOne[i-1][1];
        }
        dpOne[dpOne.length-1][0] = dpOne[dpOne.length-2][0] > dpOne[dpOne.length-2][1] ? dpOne[dpOne.length-2][0] : dpOne[dpOne.length-2][1];
        
        dpTwo[1][0] = sticker[1];
        for(int i = 2; i < sticker.length; i++) {
            dpTwo[i][0] = dpTwo[i-1][1] + sticker[i] > dpTwo[i-1][0] ? dpTwo[i-1][1] + sticker[i] :  dpTwo[i-1][0];
            dpTwo[i][1] = dpTwo[i-1][0] > dpTwo[i-1][1] ? dpTwo[i-1][0] : dpTwo[i-1][1];
        }
        dpTwo[dpTwo.length-1][0] = dpTwo[dpTwo.length-1][0] > dpTwo[dpTwo.length-1][1] ? dpTwo[dpTwo.length-1][0] : dpTwo[dpTwo.length-1][1];
        
        return dpOne[dpOne.length-1][0] > dpTwo[dpTwo.length-1][0] ? dpOne[dpOne.length-1][0] : dpTwo[dpOne.length-1][0];
    }
}

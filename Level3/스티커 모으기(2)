/*
DP 연습하기 좋은 문제.
동시에 원형이라는 점에서 차이점도 있음.

우선 DP 기본 개념은 간단함.
현재를 기준으로 뽑느다 안 뽑는다.

뽑는다면, 이전 차례에서 안 뽑은 경우에 점수와 현재 스티커 점수를 더해야 함.
안 뽑는다면, 이번 차례에서 안 뽑은 경우와 뽑은 경우 중에 큰 점수를 선택해야 함.

근데 특이점은 이 문제가 원형 구조임.
맨 마지막 스티커를 뽑을 때, 지금 가지고 있는 값이 첫 번째 스티커를 뽑은 경우인지, 아닌지 알 수 가 없음.
고로 dp를 2개 만들고 시작하는 것임.
맨 처음 스티커를 무조건 뽑고 시작하는 dp와 2번째 스티커를 무조건 뽑고 시작하는 dp

더불어서 스티커의 개수가 1개거나 2개일 수 있음.
이런 경우는 사전에 체크해서 처리
*/
class Solution {
    public int solution(int sticker[]) {
        int answer = 0;
        int[][] firstStartDp = new int[sticker.length][2];
        int[][] secondStartDp = new int[sticker.length][2];
        
        if(sticker.length == 1) {
            return sticker[0];
        }
        
        if(sticker.length == 2) {
            return Math.max(sticker[0], sticker[1]);
        }
        
        // 처음 스티커 뽑는 경우
        firstStartDp[0][0] = sticker[0];
        // 두 번째 스티커 뽑는 경우
        secondStartDp[1][0] = sticker[1];
        for(int i = 1; i < sticker.length; i++) {
            // 1일 때는 두 번째 스티커부터 출발하는 경우와 상관이 없음.
            if(i == 1) {
                firstStartDp[i][1] = Math.max(firstStartDp[i-1][0], firstStartDp[i-1][1]);
                continue;
            }
            
            if(i < sticker.length-1) {
                // 현재 뽑는 경우는 이전에 안 뽑은 경우에서 더해야 함.
                firstStartDp[i][0] += sticker[i] + firstStartDp[i-1][1];
                // 현재 안 뽑는 경우는 이전에 뽑은 경우와 안 뽑은 경우 중에 큰 값.
                firstStartDp[i][1] += Math.max(firstStartDp[i-1][0], firstStartDp[i-1][1]);
                
                secondStartDp[i][0] += sticker[i] + secondStartDp[i-1][1];
                secondStartDp[i][1] += Math.max(secondStartDp[i-1][0], secondStartDp[i-1][1]);
            // 마지막 스티커 차례가 오면,
            // 첫 번째부터 시작한 케이스는 그냥 이전 차례 중에서 최대
            // 두 번째 시작한 케이스는 이전과 같음. 뽑을지 안 뽑을지 계산해서 저장.
            } else {
                firstStartDp[i][0] += Math.max(firstStartDp[i-1][0], firstStartDp[i-1][1]);
                firstStartDp[i][1] += Math.max(firstStartDp[i-1][0], firstStartDp[i-1][1]);
                
                secondStartDp[i][0] += sticker[i] + secondStartDp[i-1][1];
                secondStartDp[i][1] += Math.max(secondStartDp[i-1][0], secondStartDp[i-1][1]);
            }
        }
            
        return Math.max(Math.max(firstStartDp[sticker.length-1][0], firstStartDp[sticker.length-1][1]), 
                 Math.max(secondStartDp[sticker.length-1][0], secondStartDp[sticker.length-1][1]));
    }
}

====================================================================================================================================================================

/*
전형적인 DP문제이면서, DP 연습하기 좋은 문제.

우선 sticker의 길이가 2이하면 로직을 탈 필요가 없음.
바로 리턴하면 됨.

다음은
DP로 만듦.
근데 여기서 특수한 상황이 원형이라는 조건 때문임. 
0번 인덱스에서 시작하냐, 1번 인덱스에서 시작하냐가 갈림.
그래서 2가지 DP를 만들어야 함.
(0번 부터 시작하면 맨 마지막 인덱스 고려X, 1번부터면 고려O)

우선 0번, 1번 시작에 따라서 DP 배열을 초기화하고,
[i][0]에는 현재 값을 안 뽑을 경우, [i][1]에는 현재 값을 뽑을 경우를 따질 것임.

[i][1]은 당연히 [i-1][0]에 현재 값을 더해야 함.
(이전에 안 뽑아야 뽑을 수 있음.)

[i][0]에 아이디어가 중요함.
얘는 이전에 뽑던 안 뽑던 상관이 없음. (이번에 안 뽑을 예정이기 때문에 제약이 없음)
고로 [i-1][0], [i-1][1] 중에서 큰 값을 넣으면 됨.

++ 아래랑 풀이는 같은 거 같은데 여기서는 O(n)이고 아래는 O(2n)
*/
class Solution {
    public int solution(int sticker[]) {
        // 길이 미달 체크
        if(sticker.length <= 2) {
            if(sticker.length == 1) {
                return sticker[0];
            } else {
                return Math.max(sticker[0], sticker[1]);
            }
        }
        
        int answer = 0;
        int[][] firstStartDp = new int[sticker.length][2];
        int[][] secondStartDp = new int[sticker.length][2];
        // 초기화
        firstStartDp[0][1] = sticker[0];
        secondStartDp[1][1] = sticker[1];
        
        for(int i = 1; i < sticker.length; i++) {
            // 첫 번째를 뽑은 경우는 맨 마지막을 고려하지 않음
            if(i < sticker.length-1) {
                // 뽑을 경우는 이전에 안 뽑은 경우 + 현재
                firstStartDp[i][1] = firstStartDp[i-1][0] + sticker[i];
                // 안 뽑을 경우는 이전에 뽑, 안 뽑 중에서 최대값
                firstStartDp[i][0] = Math.max(firstStartDp[i-1][1], firstStartDp[i-1][0]);
            }
            secondStartDp[i][1] = secondStartDp[i-1][0] + sticker[i];
            secondStartDp[i][0] = Math.max(secondStartDp[i-1][1], secondStartDp[i-1][0]);
        }

        // 첫 번째에서 맨 마지막에 뽑, 안뽑 중에 최대 vs 두 번째에서 맨 마지막에 뽑, 안 뽑 중에 최대
        answer = Math.max(Math.max(secondStartDp[secondStartDp.length-1][1], secondStartDp[secondStartDp.length-1][0]), Math.max(firstStartDp[firstStartDp.length-2][1], firstStartDp[firstStartDp.length-2][0]));
        
        
        return answer;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
Dp문제.
지금 값을 포함시킬 경우
이전의 값에서 안 더함 + 지금 값 vs 이전 값에서 더함

지금 값을 포함 안 시킬 경우
이전 값에서 안 더함 vs 이전 값에서 더 함.

++
문제가 원형이라는 조건 때문에 서로 범위가 다름.
고로, 
0 ~ 마지막 인덱스 -1 이랑
1 ~ 마지막 인덱스 조건으로 나눠서 계산해야 함.
*/
class Solution {
    public int solution(int sticker[]) {
        if(sticker.length == 1) {
            return sticker[0];
        }
        
        int[][] dpOne = new int[sticker.length][2];
        int[][] dpTwo = new int[sticker.length][2];
        
        dpOne[0][0] = sticker[0];
        for(int i = 1; i < sticker.length-1; i++) {
            dpOne[i][0] = dpOne[i-1][1] + sticker[i] > dpOne[i-1][0] ? dpOne[i-1][1] + sticker[i] :  dpOne[i-1][0];
            dpOne[i][1] = dpOne[i-1][0] > dpOne[i-1][1] ? dpOne[i-1][0] : dpOne[i-1][1];
        }
        dpOne[dpOne.length-1][0] = dpOne[dpOne.length-2][0] > dpOne[dpOne.length-2][1] ? dpOne[dpOne.length-2][0] : dpOne[dpOne.length-2][1];
        
        dpTwo[1][0] = sticker[1];
        for(int i = 2; i < sticker.length; i++) {
            dpTwo[i][0] = dpTwo[i-1][1] + sticker[i] > dpTwo[i-1][0] ? dpTwo[i-1][1] + sticker[i] :  dpTwo[i-1][0];
            dpTwo[i][1] = dpTwo[i-1][0] > dpTwo[i-1][1] ? dpTwo[i-1][0] : dpTwo[i-1][1];
        }
        dpTwo[dpTwo.length-1][0] = dpTwo[dpTwo.length-1][0] > dpTwo[dpTwo.length-1][1] ? dpTwo[dpTwo.length-1][0] : dpTwo[dpTwo.length-1][1];
        
        return dpOne[dpOne.length-1][0] > dpTwo[dpTwo.length-1][0] ? dpOne[dpOne.length-1][0] : dpTwo[dpOne.length-1][0];
    }
}

/*
DP 문제임.

DP 문제인데, 조건을 잘 생각해야 하는 DP 문제.
0~1, 1~2, 2~3
0~2, 1~3 
이런 식으로 범위를 돌면서 DP를 구함.
여기서 중간을 나누는 k변수를 둬서 

0~2인데, 
k = 0이면
0~0 & 1~2

k = 1이면
0~1 & 2~2
이렇게 범위를 쪼개서 0~2에 대한 최대, 최소를 구해야 함.
(나누는 것의 의미는 k=0일 때 기준으로, 1~2를 먼저 계산하고 다음 0번째랑 계산)

여기서 생각이 중요한 게 문제에서 최대를 구하라고 최대만 구하면 안 됨.

연산마다 최대가 되는 조건이 다름.
1) a+b일 경우에 a와 b 둘 다 최대가 되어야 함.
2) a-b일 경우에 a는 최대, b는 최소가 되어야 함.
따라서 범위를 돌면서 해당 범위의 최소와 최대를 모두 구해야 함.

dp와 arr 간에 인덱스 규칙은 dp의 인덱스 *2를 하면 arr에 해당 값의 숫자임.
*/
class Solution {
    public int solution(String arr[]) {
        int answer = -1;
        // 0은 최대, 1은 최소
        int[][][] dp = new int[arr.length/2 +1][arr.length/2 +1][2];
        
        for(int i = 0; i < dp.length; i++) {
            for(int j = 0; j < dp.length; j++) {
                dp[i][j][0] = Integer.MIN_VALUE;
                dp[i][j][1] = Integer.MAX_VALUE;
                
                if(i == j) {
                    // 자기 값들은 셋팅.
                    dp[i][j][0] = Integer.parseInt(arr[i*2]);
                    dp[i][j][1] = Integer.parseInt(arr[i*2]);
                }
            }
        }
        
        // check는 탐색 범위. 0~1 1~2 ... 0~2 이것.
        for(int check = 1; check < dp.length; check++) {
            for(int start = 0; start < dp.length; start++) {
                int end = start + check;
                if(end >= dp.length) {
                    continue;
                }
                // System.out.println("start "+start+", end "+end+" ckeck "+check);
                
                // k는 중간에 나누는 역할.
                for(int k = 0; k < dp.length; k++) {
                    if(start+k +1 > end) {
                        continue;
                    }
                    if((start+k)*2 +1 >= arr.length-1) {
                        continue;
                    }
                    
                    int maxValue = 0;
                    int minValue = 0;
                    char operator = arr[(start+k)*2+1].charAt(0);
                    if(operator == '+') {
                        // 덧셈 기호일 때
                        // 최대 = 최대 + 최대
                        // 최소 = 최소 + 최소
                        maxValue = dp[start][start+k][0] + dp[start+k+1][end][0];
                        minValue = dp[start][start+k][1] + dp[start+k+1][end][1];
                    } else {
                        // 뺄셈 기호일 때
                        // 최대 = 최대 - 최소
                        // 최소 = 최소 - 최대
                        maxValue = dp[start][start+k][0] - dp[start+k+1][end][1];
                        minValue = dp[start][start+k][1] - dp[start+k+1][end][0];
                    }
                    
                    dp[start][end][0] = Math.max(maxValue, dp[start][end][0]);
                    dp[start][end][1] = Math.min(minValue, dp[start][end][1]);
                    // System.out.println("  curK "+(start+k)+" dp? "+start+"~"+(start+k) +" vs "+(start+k+1)+"~"+end +" va: "+maxValue +" minVa: "+minValue);
                    
                }
                // System.out.println("max start "+start+", end "+end+" DPva: "+dp[start][end][0] );
                // System.out.println("min start "+start+", end "+end+" DPva: "+dp[start][end][1] );
                // System.out.println();
            }
        }
        return dp[0][dp.length-1][0];
    }
}

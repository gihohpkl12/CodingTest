import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.HashMap;

class Solution {
    public int solution(int[] A) {
        HashMap<Integer, Integer> remove = new HashMap<>(); 
        PriorityQueue<Flag> flags = new PriorityQueue<>(new Comparator<Flag>(){
            public int compare(Flag o1, Flag o2) {
                return o1.dis - o2.dis;
            }
        });

        int lastIndex = -1, index = 0;
        for(int i = 1; i < A.length-1; i++) {
            if(A[i] > A[i-1] && A[i] > A[i+1]) {
               if(lastIndex != -1) {
                   flags.add(new Flag(index, i - lastIndex));
                   index++;
               }
               lastIndex = i;
               i++;
            }
        }

        while(flags.size() != 0) {
            if(flags.peek().dis >= flags.size()+1) {
                break;
            } else {
                Flag getFlag = flags.poll();
                if(remove.containsKey(getFlag.index-1)) {
                    getFlag.dis += remove.get(getFlag.index-1);
                    flags.add(getFlag);
                    continue;
                } else {
                    remove.put(getFlag.index, getFlag.dis);
                }
            }
        }

        return flags.size()+1;
    }

    class Flag {
        int index;
        int dis;

        public Flag(int index, int dis) {
            this.index = index;
            this.dis = dis;
        }
    }
}

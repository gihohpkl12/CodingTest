import java.util.HashMap;
import java.util.ArrayList;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {
        int[] answer = new int[P.length];
        HashMap<Integer, Integer> primeCheck = new HashMap<>();
        int[] makingByPrime = new int[N+1];
        
        // N까지 소수를 구하면서, 이를 이용해서 소수로 만들 수 있는 숫자들 생성.
        for(int i = 2; i <= N; i++) {
            // 있으면 에스토스테네스의 체의 규칙에 따라 지워신 숫자로 소수가 아님.
            if(primeCheck.containsKey(i)) {
                continue;
            }
            
            // 오버플로우 일어나더라 ㅅㅂ.. 조건에서 중복도 상관없다고 했으니, 같은 소수의 제곱도 생성 가능함.
            if(i*i <= N && i*i > 0) {
                makingByPrime[i*i] = 1;
            }

            int count = 2;
            // 에스토스테네스의 체 규칙 적용. 2가 소수면 2의 배수는 전부 제거.
            while(i * count <= N) {
                primeCheck.put(i*count, 0);
                // i는 이미 소수로 판별이 된 숫자임. 그리고 count가 i 보다 작을 때, primeMap에 있다면 이는 i보다 이전에 나온 소수임. 고로 이걸로 숫자를 만듦.
                if(count < i && !primeCheck.containsKey(count)) {
                    makingByPrime[i*count] = 1;
                }
                count++;
            }
        }

        for(int i = 1; i < makingByPrime.length; i++) {
            makingByPrime[i] += makingByPrime[i-1];
        }

        for(int i = 0; i < P.length; i++) {
            int start = P[i], end = Q[i];
            answer[i] = makingByPrime[end] - makingByPrime[start-1];
        }
        return answer;
    }
}

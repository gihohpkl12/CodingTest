import java.util.HashMap;
import java.util.ArrayList;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {
        int[] answer = new int[P.length];
        HashMap<Integer, Integer> primeCheck = new HashMap<>();
        ArrayList<Integer> prime = new ArrayList<>();

        for(int i = 2; i <= N; i++) {
            if(primeCheck.containsKey(i)) {
                continue;
            }
            prime.add(i);

            int count = 2;
            while(i * count <= N) {
                primeCheck.put(i*count, 0);
                count++;
            }
        }

        int[] primeArr = new int[N+1];
        for(int i = 0; i < prime.size(); i++) {
            if(prime.get(i) * prime.get(i) <= N && prime.get(i)*prime.get(i) > 0) {
                primeArr[prime.get(i) * prime.get(i)] = 1;
            }

            for(int j = i +1; j < prime.size(); j++) {
                if(prime.get(i)*prime.get(j) <= N && prime.get(i)*prime.get(j) > 0) {
                    primeArr[prime.get(i)*prime.get(j)] = 1;
                } else {
                    break;
                }
            }
        }

        for(int i = 1; i < primeArr.length; i++) {
            primeArr[i] += primeArr[i-1];
        }

        for(int i = 0; i < P.length; i++) {
            int start = P[i], end = Q[i];
            answer[i] = primeArr[end] - primeArr[start-1];
        }
        return answer;
    }
}

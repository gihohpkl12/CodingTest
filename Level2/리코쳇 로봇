/*
그냥 조건대로 움직이게 탐색하면 됨.
여기선 그냥 DFS로 풀었는데
탐색을 멈추는 조건을 잘 잡아야 함.

여기서 조건은 
1. 일단 못 가면 G에 도달하지 못하면 -1이고,
2. 최소값을 리턴해야 함.

1번 조건에 따라서 
현재 count가 answer보다 클 경우면 break;

2번 조건에 따라서
이전에 현재 위치에 도착한 적이 있을 경우에는 값을 비교에서 현재 값이 더 크면 break;
현재 값이 더 작으면 값을 갱신함.

2번이 가능한 이유는
어차피 문제 조건 때문에 현재 위치에서 다음 위치로 이동하는 결과가 항상 동일함.

살짝 마음에 걸려서 4가지 방향까지 추가했는데 안 해도 통과하긴 함
*/
class Solution {
    static int answer = -1;
    public int solution(String[] board) {
        char[][] playBoard = new char[board.length][board[0].length()];
        int x = 0, y = 0;
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length(); j++) {
                playBoard[i][j] =  board[i].charAt(j);
                
                if(board[i].charAt(j) == 'R') {
                    x = j;
                    y = i;
                }
            }
        }
        
        // int[][] check = new int[board.length][board[0].length()];  이렇게 해도 됨
        int[][][] check = new int[board.length][board[0].length()][4];
        // check[y][x] = 1;
        play(playBoard, x, y, 0, check);
        return answer;
    }
    
    public void play(char[][] playBoard, int x, int y, int count, int[][][] check) {
        if(playBoard[y][x] == 'G') {
            answer = answer == -1 ? count : Math.min(answer, count);
            return;
        }
        
        // 상하좌우로 이동
        int[][] moving = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for(int i = 0; i < moving.length; i++) {
            int moveX = moving[i][0], moveY = moving[i][1];
            int nextX = x, nextY = y;
            
            while(rangeCheck(nextX + moveX, nextY + moveY, playBoard[0].length, playBoard.length) && playBoard[nextY + moveY][nextX + moveX] != 'D') {
                nextX += moveX;
                nextY += moveY;
            }
            
            // 이동할 위치가 전에 간 적이 없거나, 전보다 빠르게 도착했으면 가능
            if(check[nextY][nextX][i] == 0 || check[nextY][nextX][i] > count+1) {
                check[nextY][nextX][i] = count+1;    
            } else {
                continue;
            }
             
            if(answer == -1 || answer > count+1) {
                play(playBoard, nextX, nextY, count+1, check);    
            }
        }
    }
    
    public boolean rangeCheck(int x, int y, int rangeX, int rangeY) {
        if(x >= 0 && y >= 0 && x < rangeX && y < rangeY) {
            return true;
        }
        return false;
    }
}

import java.util.Queue;
import java.util.LinkedList;

/*
문제대로 풀면 됨.
DP랑 BFS를 사용하는 완전 탐색이랑 헷갈릴 수 있는데
DP로 하면 최대 차이의 점수는 구할 수 있어도, 쏜 내역을 구할 수는 없음.
그래서 완전 탐색 문제.

문제 풀이 자체는 간단함.
현재 점수에서 쏘는 경우와 안 쏘는 경우를 나눠서 따지면 됨.

단, 맨 마지막에 도착했는데 화살이 남아있으면 맨 마지막에 화살을 다 쏴야 함.
(문제 조건에서 동점일 경우 점수가 가장 적은 쪽을 많이 맞춘 케이스를 정답으로 인정하기 때문)
*/
class Solution {
    public int[] solution(int n, int[] info) {
        return shoot(n, info);
    }
    
    // 쏘는 경우 bfs
    public int[] shoot(int n, int[] info) {
        int[] result = new int[info.length];
        int maxPoint = 0;
        Queue<History> historyQ = new LinkedList<>();
        historyQ.add(new History(info.length, new int[info.length], n, 0));
        
        while(historyQ.size() > 0) {
            History curHistory = historyQ.poll();
            
            // 정답 체크
            if(curHistory.remain == 0 || curHistory.curIndex == info.length) {
                int curPoint = cal(info, curHistory.shootHistory);
                // 점수가 더 크면 바로 갱신
                if(maxPoint < curPoint) {
                    maxPoint = curPoint;
                    result = curHistory.shootHistory;
                    // 점수가 같으면 가장 낮은 점수 칸을 많이 맞춘 케이스로 갱신
                } else if(curPoint != 0 && maxPoint == curPoint) {
                    boolean change = false;
                    for(int i = result.length-1; i >= 0; i--) {
                        if(result[i] > curHistory.shootHistory[i]) {
                            break;
                        } else if(result[i] < curHistory.shootHistory[i]) {
                            change = true;
                            break;
                        }
                    }
                    
                    if(change) {
                        result = curHistory.shootHistory;
                    }
                }
                continue;
            }
            
            // 안 쏘는 경우
            History nonShootCase = new History(info.length, curHistory.shootHistory, curHistory.remain, curHistory.curIndex);
            if(nonShootCase.curIndex == info.length-1 && nonShootCase.remain > 0) {
                nonShootCase.shootHistory[info.length-1] += nonShootCase.remain;
                nonShootCase.remain = 0;
            }
            nonShootCase.curIndex += 1;
            historyQ.add(nonShootCase);
            
            // 쏘는 경우
            History shootCase = new History(info.length, curHistory.shootHistory, curHistory.remain, curHistory.curIndex);
            if(info[curHistory.curIndex]+1 <= shootCase.remain) {
                shootCase.shootHistory[curHistory.curIndex] = info[curHistory.curIndex]+1;
                shootCase.remain -= info[curHistory.curIndex]+1;
                if(shootCase.curIndex == info.length-1 && shootCase.remain > 0) {
                    shootCase.shootHistory[curHistory.curIndex] += shootCase.remain;
                    shootCase.remain = 0;
                }
                shootCase.curIndex += 1;
                historyQ.add(shootCase);
            }
        }
        return maxPoint == 0 ? new int[] {-1} : result;
    }
    
    // 점수 계산
    // 동점이거나 어피치가 높으면 어피치 점수
    // 둘 다 0이면 패스
    public int cal(int[] info, int[] history) {
        int rionPoint = 0;
        int apeachPoint = 0;
        
        for(int i = 0; i < history.length; i++) {
            if(info[i] == 0 && history[i] == 0) {
                continue;
            }
            
            if(info[i] >= history[i]) {
                apeachPoint += 10 - i;
            } else {
                rionPoint += 10 - i;
            }
        }
        
        return rionPoint - apeachPoint;
    }
    
    class History {
        int[] shootHistory;
        int remain;
        int curIndex;
        
        public History(int length, int[] shootHistory, int remain, int curIndex) {
            this.shootHistory = new int[length];
            for(int i = 0; i < shootHistory.length; i++) {
                this.shootHistory[i] = shootHistory[i];
                this.remain = remain;
                this.curIndex = curIndex;
            }
        }
    }
}

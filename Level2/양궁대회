import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;

/*
1. 아파치가 못 맞춘 곳을 쏘는 경우에는 상관없지만,
아파치가 맞춘 곳을 뺏는 경우에는 아파치의 점수에도 변화가 생김.

2. 라이언이 최고 점수를 얻는 경우가 아니라, 점수차가 최대일 때임.

3. 정렬 기억
*/

class Solution {
    public int[] solution(int n, int[] info) {
        ArrayList<Arrow> result = new ArrayList<>();
        int apeachSocre = 0, maxRionScore = Integer.MIN_VALUE;
        for(int i = 0; i < info.length; i++) {
            if(info[i] != 0) {
                apeachSocre += (10 - i);
            }
        }
        
        Queue<Arrow> caseQ = new LinkedList<>();
        Arrow init = new Arrow(n, apeachSocre);
        caseQ.add(init);
        
        while(caseQ.size() > 0) {
            Arrow curCase = caseQ.poll();
            if((curCase.index == info.length || curCase.remain == 0) && curCase.score > curCase.apeachSocre) {
                // reamin이 남으면 가장 마지막에 더해줌.
                if(curCase.remain != 0) {
                    curCase.targets[curCase.targets.length-1] += curCase.remain;
                }
                
                // 정답이 없었으면 그냥 추가
                if(result.size() == 0) {
                    result.add(curCase);    
                } else {
                    // 정답이 있었을 때, 이전 값이랑 비교해서 더 큰 값을 저장.
                    if(result.get(0).score - result.get(0).apeachSocre < curCase.score - curCase.apeachSocre) {
                        // 이전에 값이 여러개 저장됐을 수 있음. 따라서 전부 삭제.
                        while(result.size() >= 1) {
                            result.remove(0);
                        }
                        result.add(curCase);
                        // 중복케이스 저장.
                    } else if(result.get(0).score - result.get(0).apeachSocre == curCase.score - curCase.apeachSocre) {
                        result.add(curCase);
                    }
                }
                continue;
                // 정답이 안 되는 경우에는 그냥 넘김.
            } else if(curCase.index == info.length || curCase.remain == 0) {
                continue;
            }
            
            // 안 쏘는 경우 저장.
            Arrow nonShootingCase = new Arrow(curCase.targets, curCase.index+1, curCase.score, curCase.remain, curCase.apeachSocre);
            caseQ.add(nonShootingCase);

            // 쏠 수 있는 경우
            if(curCase.remain > info[curCase.index]) {
                Arrow shootingCase = new Arrow(curCase.targets, curCase.index, curCase.score, curCase.remain - (info[curCase.index]+1), curCase.apeachSocre);
                shootingCase.score += (10 - shootingCase.index);
                // 어차피가 쐈던 곳이라면 어차피 점수를 까야 함.
                if(info[curCase.index] != 0) {
                    shootingCase.apeachSocre -= (10 - shootingCase.index);
                }
                shootingCase.targets[shootingCase.index] = info[shootingCase.index]+1;
                shootingCase.index += 1;
                caseQ.add(shootingCase);
            }
        }
        
        if(result.size() == 0) {
            return new int[] {-1};
        } else if(result.size() == 1) {
            return result.get(0).targets;
        }
        
        // 배열의 마지막부터 돌면서 정렬함.
        Collections.sort(result, new Comparator<Arrow>(){
            public int compare(Arrow o1, Arrow o2) {
                int change = 0;
                
                for(int i = o1.targets.length-1; i >= 0; i--) {
                    if(o1.targets[i] > o2.targets[i]) {
                        change = -1;
                        break;
                    } else if(o1.targets[i] < o2.targets[i]) {
                        change = 1;
                        break;
                    }
                }
            
                return change;
            }
        });
        return result.get(0).targets;
    }
    
    class Arrow {
        int score;
        int[] targets = new int[11];
        int index;
        int remain;
        int apeachSocre;
        
        public Arrow(int n, int apeachSocre) {
            this.index = 0;
            this.remain = n;
            this.apeachSocre = apeachSocre;
        }
        
        public Arrow(int[] targets, int index, int score, int remain, int apeachSocre) {
            this.index = index;
            this.score = score;
            this.remain = remain;
            this.apeachSocre = apeachSocre;
            
            for(int i = 0; i < targets.length; i++) {
                this.targets[i] = targets[i];
            }
        }
    }
}

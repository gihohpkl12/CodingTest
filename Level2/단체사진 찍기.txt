import java.util.Queue;
import java.util.LinkedList;

/*
그냥 모든 케이스를 만들고,
해당 케이스가 조건에 맞는지 검색함.
*/

class Solution {
    public int solution(int n, String[] data) {
        int answer = 0;
        Queue<String> caseQ = new LinkedList<>();
        String[] init = {"A", "C", "F", "J", "M", "N", "R", "T"};
        LinkedList<String> friends = new LinkedList<>();
        
        for(String friend : init) {
            friends.add(friend);
        }
        
        makingAllCase(new LinkedList<>(), caseQ, friends);
        
        while(caseQ.size() > 0) {
            String curCase = caseQ.poll();
            boolean check = true;
            
            for(String info : data) {
                String first = info.substring(0,1);
                String second = info.substring(2,3);
                int num = Integer.parseInt(info.substring(4, info.length()))+1;
                
                if(info.charAt(3) == '=') {
                    if(Math.abs(curCase.indexOf(first) - curCase.indexOf(second)) != num) {
                        check = false;
                        break;
                    }
                } else if(info.charAt(3) == '>') {
                    if(Math.abs(curCase.indexOf(first) - curCase.indexOf(second)) <= num) {
                        check = false;
                        break;
                    }
                } else if(info.charAt(3) == '<') {
                    if(Math.abs(curCase.indexOf(first) - curCase.indexOf(second)) >= num) {
                        check = false;
                        break;
                    }
                }
            }
            
            if(check) {
                answer++;
            }
        }
        return answer;
    }
    
    public void makingAllCase(LinkedList<String> cur, Queue<String> caseQ, LinkedList<String> friends) {
        if(cur.size() == 8) {
            StringBuilder sb = new StringBuilder();
            
            for(String friend : cur) {
                sb.append(friend);
            }
            
            caseQ.add(sb.toString());
            return;
        }
        
        for(int i = 0; i < friends.size(); i++) {
            cur.add(friends.get(i));
            String backup = friends.get(i);
            friends.remove(i);
            makingAllCase(cur, caseQ, friends);
            cur.remove(cur.size()-1);
            friends.add(i, backup);
        }
    }
}

=========================================================================================================================================
import java.util.ArrayList;
class Solution {
  static ArrayList<String> total;
	public int solution(int n, String[] data) 
	{
		int answer =0;
        total = new ArrayList<>();
		String[] name = {"A", "C", "F", "J", "M", "N", "R", "T"};
		ArrayList<String> list = new ArrayList<>();
		String temp ="";
		for(String i : name)
			list.add(i);
		make_com(list,temp, list.size());
		for(String a : total)
		{
			if(check_All_condition(data,a))
				answer++;
		}
		
		return answer;
	}
	public static void make_com(ArrayList<String> list,String temp ,int length)
	{
		if(temp.length()==length)
		{
			total.add(temp);
			return;
		}
		ArrayList<String> list_temp = (ArrayList<String>)list.clone();
		for(int i=0; i<list_temp.size(); i++)
		{
			String temp2 = temp;
			String a = list_temp.get(i);
			temp2 += a;
			list_temp.remove(i);
			make_com(list_temp, temp2, length);
			list_temp.add(i,a);
		}
	}
	
	
	public static boolean check_All_condition(String[] data, String friend)
	{
		boolean result = false;
		for(int i =0; i<data.length; i++)
		{
			if(check(data[i],friend))
			{
				result = true;
			}else
			{
				result = false;
				break;
			}
		}
		
		return result;
	}
	public static boolean check(String data, String friend)
	{
		int num = Integer.parseInt(data.substring(4,5))+1;
		boolean result = false;
		if(data.charAt(3)=='=')
		{
			String first = data.substring(0,1);
			String second = data.substring(2,3);
			int gap = friend.indexOf(first)-friend.indexOf(second);
			gap = gap>0 ? gap : gap*-1;
			if(gap== num)
			{
				result = true;
			}else
			{
				result = false;
			}
		}
		if(data.charAt(3)=='>')
		{
			String first = data.substring(0,1);
			String second = data.substring(2,3);
			int gap = friend.indexOf(first)-friend.indexOf(second);
			gap = gap>0 ? gap : gap*-1;
			if(gap> num)
			{
				result = true;
			}else
			{
				result = false;
			}
		}
		if(data.charAt(3)=='<')
		{
			String first = data.substring(0,1);
			String second = data.substring(2,3);
			int gap = friend.indexOf(first)-friend.indexOf(second);
			gap = gap>0 ? gap : gap*-1;
			if(gap< num)
			{
				result = true;
			}else
			{
				result = false;
			}
		}
		return result;
	}
}

import java.util.HashSet;

/*
토핑을 앞, 뒤에서부터 탐색함.
순서대로 진행했을 때, 해당 지점에서 먹을 수 있는 토핑의 개수를 구함.

ex. 
1 2 1 3 1 4 1 2

앞
1 2 2 3 3 4 4 4

뒤
4 4 4 4 3 3 2 1

인덱스 0에서 짜르면(0 ~ i, i+1 ~ length-1)
한 명은 0, 나머지는 1부터 끝까지 먹게 됨.
이때 비교해보면 
(앞부터) 0일 경우에는 1가지 맛을 먹게 됨
(뒤부터) 1인 경우에는 4가지 맛을 먹게 됨.

반복해서 잘랐을 때, 값이 같은 인덱수 개수 count.
*/

class Solution {
    public int solution(int[] topping) {
        int answer = 0;
        int[] preOrder = new int[topping.length];
        int[] postOrder = new int[topping.length];
        HashSet<Integer> preSet = new HashSet<>();
        HashSet<Integer> postSet = new HashSet<>();
        int preCount = 0, postCount = 0;
        
        for(int i = 0; i < topping.length; i++) {
            int index = topping.length -1 - i;
            
            if(preSet.contains(topping[i])) {
                preOrder[i] = preCount;
            } else {
                preSet.add(topping[i]);
                preOrder[i] = ++preCount;
            }
            
            if(postSet.contains(topping[index])) {
                postOrder[index] = postCount;
            } else {
                postSet.add(topping[index]);
                postOrder[index] = ++postCount;
            }
        }
        
        for(int i = 0; i < preOrder.length-1; i++) {
            if(preOrder[i] == postOrder[i+1]) {
                answer++;
            }
        }
        
        return answer;
    }
}

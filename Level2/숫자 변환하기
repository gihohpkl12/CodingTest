/*
처음에 Q에 넣어서 그냥 모든 케이스를 생성하게 풀었는데
그렇게 하면 시간 초과가 나옴.

dp로 풀어야 함.

dp 아이디어도 여러개가 될 수 있는데,
현재 위치를 기준으로 값을 셋팅하는 것
or
현재 위치에서 *2, *3, +n만큼 이동한 값을 셋팅하는 것.

나는 후자로 풀었음.

우선 dp를 전부 Integer.MAX_VALUE-1로 셋팅함.
(나중에 +1 하기 위해서 -1하는 것. 근데 의미 없는 것 같기는 함)

시작 지점 x는 0으로 하고,
i는 1씩 증가해서 y까지가는 것.

근데 여기서
원래대로 따르면 도착하지 못 할 i가 있음.
예제 1번에 경우 11, 12, 13 등은 못 가는 곳임.

이걸 거르기 위해서 dp[i] != Integer.MAX_VALUE-1 이 조건을 넣음.
*/

import java.util.Arrays;

class Solution {
    public int solution(int x, int y, int n) {
        int answer = 0;
        int[] dp = new int[y+1];
        // 일단 불가능한 값을 전부 셋팅
        Arrays.fill(dp, Integer.MAX_VALUE-1);        
        
        // 시작 지점
        dp[x] = 0;
        for(int i = x; i <= y; i++) {
            // 이전에 해당 위치에 값을 계산해놨다면 이 곳은 도착할 수 있는 곳임.
            if(dp[i] != Integer.MAX_VALUE-1) {
                if(i * 2 <= y) {
                    setValue(dp, i, i * 2);    
                }
                
                if(i * 3 <= y) {
                    setValue(dp, i, i * 3);
                }
                
                if(i + n <= y) {
                    setValue(dp, i, i + n);
                }
            }
        }
        
        return dp[y] == Integer.MAX_VALUE-1 ? -1 : dp[y];
    }
    
    public void setValue(int[] dp, int curIndex, int nextIndex) {
        dp[nextIndex] = Math.min(dp[curIndex] + 1, dp[nextIndex]);
    }
}

/*
그냥 단순하게 1씩 증가시켜서 찾을 수도 있는 문제임.
근데 다른 방식도 가능함.

우선 이진수로 변환함.
그리고 가장 끝에 있는 1에다가 1을 더한다고 생각하면 됨.
그럼 1이 0이 되고 그 앞자리에 1이 추가 되겠지.

바꾼 숫자를 다시 2진수로 바꿨을 때, 1개수 차이를 비교해보고, 
만약에 1이 더 적으면
맨 끝부터 0을 찾아서 0에다가 1을 더해줌. (크게 만들어야 하는데 가장 작아야 함으로 0에다가 더 함)

만약에 다 돌았는데 0이 없어서 1을 못 더해줬으면 맨 앞에 추가하는 것.
*/
class Solution {
    public int solution(int n) {
        String num = Integer.toString(n, 2);
        int count = num.replace("0", "").length();
        
        StringBuilder sb = new StringBuilder();
        for(int i = num.length()-1; i >= 0; i--) {
            sb.insert(0, num.charAt(i));
            if(num.charAt(i) == '1') {
                break;
            } 
        }
        
        num = Integer.toString(Integer.parseInt(num, 2) + Integer.parseInt(sb.toString(), 2), 2);
        int newCount = count - num.replace("0", "").length();
        
        StringBuilder secondSb = new StringBuilder();
        for(int i = num.length()-1; i >= 0; i--) {
            if(newCount <= 0) {
                break;
            }
            
            if(num.charAt(i) == '0') {
                secondSb.insert(0, "1");
                newCount--;
            } else {
                secondSb.insert(0, "0");
            }
        }
        
        while(newCount > 0) {
            secondSb.insert(0, "1");
            newCount--;
        }
        
        return secondSb.length() != 0 ? Integer.parseInt(num, 2) + Integer.parseInt(secondSb.toString(), 2) : Integer.parseInt(num, 2);
    }
}
====================================================================================================================
class Solution {
  	public int solution(int n) 
	{
		int answer =n;
		int standard = one_count(n);
		while(true)
		{
			answer++;
			if(answer>n && standard==one_count(answer))
				break;
		}
		return answer;		
	}
	
	public static int one_count(int n) 
	{
		int count =0;
		String binary = Integer.toBinaryString(n);
		for(int i=0; i<binary.length(); i++)
		{
			if(binary.charAt(i)=='1')
				count ++;
		}
		return count;
	}
}

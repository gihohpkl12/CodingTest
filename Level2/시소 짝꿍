/*
몇 쌍이 존재하냐의 문제임.
중복되는 몸무게들이 존재할 수 있는데 이게 전부 다른 사람이기 때문에 결국 경우의 수 문제가 됨.
(순서는 상관없는)

그리고 탐색할 때,
이중 반복문으로 돌리면 무조건 시간 초과임.
그냥 반복문 1회로 끝내야 함.

반복문을 돌면서
우선 같은 몸무게인 사람이 있는지 체크하고
몸무게를 가지고 2:3, 2:4, 3:4에 해당하는 몸무게를 생성함.
그리고 그걸 몸무게를 저장해놓은 hashMap에서 있는지 여부로 체크하면 됨.

*/

import java.util.HashMap;

class Solution {
    public long solution(int[] weights) {
        long answer = 0;
        // map 셋팅
        HashMap<Integer, Integer> weightMap = new HashMap<>();
        for(int weight : weights) {
            if(weightMap.containsKey(weight)) {
                weightMap.replace(weight, weightMap.get(weight)+1);
            } else {
                weightMap.put(weight, 1);
            }
        }
        
        // 중복해서 계산하면 안 되기 때문에 keySet으로
        for(int weight : weightMap.keySet()) {
            // 같은 몸무게 (1:1)인 사람
            if(weightMap.get(weight) > 1) {
                // 같은 몸무게는 예를 들어 3명이면 3명 중에 2명 뽑는 경우의 수임. 3 * 2인데 순서 상관 없으니까 /2해줘야 함.
                // long으로 미리 형변환 안 하고 계산하면 결과 int를 long으로 변환하기 때문에 늦음
                answer += (long)(weightMap.get(weight) * (long)(weightMap.get(weight)-1))/2;
            }
            answer += calRate(weight, weightMap);   
        }
        
        return answer;
    }
    
    public long calRate(int weight, HashMap<Integer, Integer> weightMap) {
        long result = 0;
        double num = (double)weight;
        
        // 180을 예로 들면 180 / 2 * 3 == 270
        for(int i = 2; i < 4; i++) {
            for(int j = i+1; j <= 4; j++) {
                // 이게 double로 계산한 다음에 다시 정수로 바꾸어야 함.
                // 왜냐면 ex. 105 / 2 * 4하면 다시 정수로 돌아옴. 이런 경우를 위해서.
                double key = num/(double)i * (double)j;
                if(key % 1 == 0) {
                    if(weightMap.containsKey((int)key)) {
                        // long으로 미리 형변환 안 하고 계산하면 결과 int를 long으로 변환하기 때문에 늦음
                        result += (long)weightMap.get(weight) * (long)weightMap.get((int)key);
                    }    
                }
            }
        }

        return result;
    }
}

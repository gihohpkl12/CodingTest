/*
그냥 모든 경우의 수를 만들고
탐색함

근데 이거 그리디로 접근 가능한 듯.
만약에 캐는 순서가 정해져있지 않았다면 완전 탐색.
근데 캐는 순서가 정해져있음.
즉, 5개씩 묶어서 생각해보면 됨.
*/
import java.util.ArrayList;
class Solution {
    public int solution(int[] picks, String[] minerals) {
        int answer = Integer.MAX_VALUE;
        
        int total = 0;
        for(int num : picks) {
            total += num;
        }
        
        ArrayList<ArrayList<String>> allCase = new ArrayList<>();
        makingAllCase(picks, allCase, new ArrayList<>(), total);
        
        for(ArrayList<String> cur : allCase) {
            int toolUseCount = 0;
            int toolCount = total;
            int curToolIndex = 0;
            int curResult = 0;
            
            for(String mineral : minerals) {
                curResult += dig(convertToolToInt(cur.get(curToolIndex)), convertToolToInt(mineral));
                toolUseCount++;
                
                if(curResult > answer) {
                    break;
                }
                
                if(toolUseCount >= 5) {
                    toolCount--;
                    curToolIndex++;
                    toolUseCount = 0;
                    
                    if(toolCount == 0)  {
                        break;
                    }
                }
            }
            answer = Math.min(answer, curResult);
        }
        
        
        return answer;
    }
    
    
    // 캐다
    public int dig(int tool, int mineral) {
        if(tool - mineral >= 0) {
            return 1;  
        } else {
            if(mineral - tool == 1) {
                return 5;
            } else {
                return 25;
            }
        }
    }

    
    // 곡괭이 컨버터
    public String convertIndexToTool(int num) {
        if(num == 0) {
            return "diamond";
        } else if(num == 1) {
            return "iron";
        } else {
            return "stone";
        }
    }
    
    public int convertToolToInt(String tool) {
        if(tool.equals("diamond")) {
            return 3;
        } else if(tool.equals("iron")) {
            return 2;
        } else {
            return 1;
        }
    }
    
    public void makingAllCase(int[] picks, ArrayList<ArrayList<String>> allCase, ArrayList<String> cur, int end) {
        if(cur.size() >= end) {
            ArrayList<String> save = new ArrayList<>();
            
            for(String temp : cur) {
                // System.out.print(temp+ " ");
                save.add(temp);
            }
            // System.out.println();
            allCase.add(save);
            return;       
        }
        
        for(int i = 0; i < picks.length; i++) {
            if(picks[i] > 0) {
                picks[i] -= 1;
                cur.add(convertIndexToTool(i));
                makingAllCase(picks, allCase, cur, end);
                picks[i] += 1;
                cur.remove(cur.size()-1);
            }
        }
    }
}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Collections;
import java.util.Comparator;

/*
차량이 들어오고, 나갈 때 저장함.
근데 차량이 하루에 두번 이상 들어올 때를 대비해서
하루 동안 사용한 시간만 저장해놓고 요금 계산은 맨 마지막에 해야 함.
(하루에 2번 사용할 때 기본 요금을 2번 내지 않음. 1번 내고 통합 사용 시간으로 요금을 계산함)

여기서 해시맵과 리스트로 Car를 저장 및 정렬 하는 방식하고
트리맵으로 애초에 정렬되는 방식으로 해봤는데
속도 차이는 거의 없는데 오히려 처음이 조금 더 빠름.
*/

class Solution {
    public int[] solution(int[] fees, String[] records) {
        ArrayList<Car> answerList = new ArrayList<>();
        HashMap<String, String> park = new HashMap<>();
        TreeMap<String, Car> history = new TreeMap<>();
        
        int endTime = convertTimeToInt("23:59");
        int defaultTime = fees[0];
        int defaultFee = fees[1];
        int timeForFee = fees[2];
        int feeForMinute = fees[3];
        
        for(String record : records) {
            String[] temp = record.split(" ");
            String time = temp[0];
            String num = temp[1];
            String type = temp[2];
            
            if(type.equals("IN")) {
                park.put(num, time);
            } else {
                int usingTime = convertTimeToInt(time) - convertTimeToInt(park.get(num));
                saveCarHistory(usingTime, num, history, answerList);
                park.remove(num);
            }
        }
        
        for(String num : park.keySet()) {
            int usingTime = endTime - convertTimeToInt(park.get(num));
            saveCarHistory(usingTime, num, history, answerList);
        }
        
        // Collections.sort(answerList, new Comparator<Car>(){
        //     public int compare(Car o1, Car o2) {
        //         return o1.num - o2.num;
        //     }
        // });
        
        int[] answer = new int[history.size()];
        int index = 0;
        for(String key : history.keySet()) {
            Car car = history.get(key);
            int usingTime = car.usingTime;
            
            if(usingTime <= defaultTime) {
                answer[index++] = defaultFee;
            } else {
                int curFee = defaultFee;
                usingTime -= defaultTime;
                curFee += (usingTime/timeForFee) * feeForMinute;
                curFee = usingTime%timeForFee == 0 ? curFee : curFee + feeForMinute;
                answer[index++] = curFee;
            }
        }
//         for(Car car : answerList) {
//             int usingTime = car.usingTime;
            
//             if(usingTime <= defaultTime) {
//                 answer[index++] = defaultFee;
//             } else {
//                 int curFee = defaultFee;
//                 usingTime -= defaultTime;
//                 curFee += (usingTime/timeForFee) * feeForMinute;
//                 curFee = usingTime%timeForFee == 0 ? curFee : curFee + feeForMinute;
//                 answer[index++] = curFee;
//             }
//         }
        
        return answer;
    }
    
    public void saveCarHistory(int time, String num, TreeMap<String, Car> history, ArrayList<Car> answerList) {
        if(history.containsKey(num)) {
            Car saved = history.get(num);
            saved.usingTime += time;
        } else {
            Car save = new Car();
            save.num = Integer.parseInt(num);
            save.usingTime = time;
            answerList.add(save);
            history.put(num, save);
        }
    }
    
    public int convertTimeToInt(String time) {
        String[] temp = time.split(":");
        return Integer.parseInt(temp[0])*60 + Integer.parseInt(temp[1]);
    } 
    
    class Car {
        int fee;
        int num;
        int usingTime;
    }
}

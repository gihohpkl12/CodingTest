import java.util.ArrayList;
public class Solution {
	static int answer =1;
	 public int solution(int n) {
	     int start =0, end = -1;
	     ArrayList<Integer> first_case = new ArrayList<>();
	     for(int i =1; i<n; i++)
	     {
		     int temp = 0; 
	    	 for(int j =i; j<n; j++)
	    	 {
	    		 temp +=j;
		    	 if(temp==n)
		    	 {
		    		 start = i; end = j; i=n+1;
		    		 answer +=1;
		    		 break;
		    	 }
		    	 if(temp>n)
		    		 break;
	    	 }
	     }
	     for(int i = start; i<=end; i++)
	    	 first_case.add(i);
	  
	     if(first_case.size()!=0)
	    	 recursion(first_case, n);
	      return answer;
	  }
	
	 public static int recursion(ArrayList<Integer> first_case, int n)
	 {
		 ArrayList<Integer> temp = (ArrayList<Integer>)first_case.clone();
		 int sum =0;
		 int end = temp.size();
		 for(int i=0; i<end; i++)
		 {
			 if(temp.size()<2)
				 break;
			 sum +=temp.get(0);
			 temp.remove(0);
			 if(temp.get(temp.size()-1)+1 == sum)
			 {
				 answer += 1;
				 temp.add(temp.size()-1,sum);
				 break;
			 }
			 else if(sum % temp.size()==0 && temp.size()>1)
			 {
				 answer += 1;
				 for(int j =0; j<temp.size(); j++)
					 temp.set(j, temp.get(j)+sum/temp.size());
				 break;
			 }
		 }
		 if(temp.size()>2)
			 recursion(temp,n);
		 return 0;
	 }
}
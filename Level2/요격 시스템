import java.util.Comparator;
import java.util.Arrays;

/*
원래 내가 풀었던 방식보다 빠른 것 같아서 이렇게 함.
개념은 비슷함
그냥 시간 개념으로 start 기준으로 미사일 보고,
end 타임 기준으로 챙김

근데 else if 조건을 놓치기 쉬운데 저것도 챙겨야 함.

만약에 1 - 10까지 날라가는 미사일이 있음.
2 - 4까지 날라가는 미사일은 범위내에 들어감. ㅇㅋ임
다음 미사일이 5 - 8까지라고 하면
1~10 범위 내에서는 맞기 때문에 되는데 앞서 2-4와는 중복되지 않음
그래서 범위내로 확정한 미사일을 확정하면,
last범위를 작은 애로 바꿔야 함.
위에서 보면 2-4의 4가 1-10의 10보다 작으니까 4로 변경해야 함.
그러면 5-8은 자연스럽게 걸러짐.
*/
class Solution {
    public int solution(int[][] targets) {
        Arrays.sort(targets, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                if(o1[0] - o2[0] != 0) {
                    return o1[0] - o2[0];
                }
                
                return o1[1] - o2[1];
            }
        });
        
        for(int[] target : targets) {
            System.out.println(target[0]+", "+target[1]);
        }
        
        return interceptMissile(targets);
    }
    
    public int interceptMissile(int[][] targets) {
        int result = 0;
        int lastInTime = 0;
        int lastOutTime = 0;
        
        for(int i = 0; i < targets.length; i++) {
            int startTime = targets[i][0] * 10 +1;
            int endTime = targets[i][1] * 10 -1;
            
            if(lastOutTime < startTime) {
                lastOutTime = endTime;
                lastInTime = startTime;
                result++;
            // 통과한 미사일의 범위가 더 좁으면 그걸로 바꿔야 함.
            // last: 1 - 10 , prePass : 2 - 4, cur : 5 - 8
            // 위 케이스에서 에러가 안 나기 위해서 1-10, 2-4 에서 범위를 4로 갱신해야 함
            } else if(lastOutTime > endTime) {
                lastOutTime = endTime;
            }
        }
        
        return result;
    }
}


=================================================================================================================================

import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.HashMap;

/*
간단하게 요격이 가능한지 아닌지만 따지면 됨.
범위 기준에 걸치면 요격이 불가능함.
그래서 기준을 
start = * 10 +1
end = * 10 -1

그리고 end 기준 pq에서 한 발 쏘고
그 다음 in에서 해당 미사일이 끝나기 전까지 따져서 count++
*/

class Solution {
    public int solution(int[][] targets) {
        PriorityQueue<Missile> inQ = new PriorityQueue<>(new Comparator<Missile>(){
            public int compare(Missile o1, Missile o2) {
                return o1.in - o2.in;
            }
        });
        PriorityQueue<Missile> outQ = new PriorityQueue<>(new Comparator<Missile>(){
            public int compare(Missile o1, Missile o2) {
                return o1.out - o2.out;
            }
        });
        
        int id = 0;
        for(int[] target : targets) {
            target[0] = target[0] * 10 + 1;
            target[1] = target[1] * 10 - 1;
            
            inQ.add(new Missile(id, target[0], target[1]));
            outQ.add(new Missile(id, target[0], target[1]));
            id++;
        }
        
        return interceptMissile(inQ, outQ);
    }
    
    public int interceptMissile(PriorityQueue<Missile> inQ, PriorityQueue<Missile> outQ) {
        HashMap<Integer, Integer> missileIdCheckMap = new HashMap<>();
        int count = 0;
        
        while(inQ.size() > 0 || outQ.size() > 0) {
            if(outQ.size() > 0) {
                Missile end = null;
                while(outQ.size() > 0) {
                    if(missileIdCheckMap.containsKey(outQ.peek().id)) {
                        outQ.poll();     
                    } else {
                        end = outQ.poll();
                        missileIdCheckMap.put(end.id, 0);
                        break;
                    }
                }
                
                if(end == null) {
                    break;
                }
                
                while(inQ.size() > 0) {
                    if(missileIdCheckMap.containsKey(inQ.peek().id)) {
                        inQ.poll();
                    } else if(inQ.peek().in <= end.out && inQ.peek().out >= end.out) {
                        Missile get = inQ.poll();
                        missileIdCheckMap.put(get.id, 0);
                    } else {
                        break;
                    }
                }
                count++;
            }
        }
        return count;
    }
    
    class Missile {
        int id;
        int in;
        int out;
        
        public Missile(int id, int in, int out) {
            this.id = id;
            this.in = in;
            this.out = out;
        }
    }
}

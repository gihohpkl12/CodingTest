import java.util.Comparator;
import java.util.Arrays;

/*
우선 미사일을 정렬해야 함.
발사 시간 - 도착 시간 순서로.

다음은 서로 같이 터트릴 미사일로 그룹화 해야 함.

우선 현재 미사일이 없을 경우 미사일을 하나 킵함.
다음 미사일을 받음.
해당 미사일과 캡 해놓은 미사일을 같이 터트릴 수 있을지 확인함.

같이 터트리는 게 불가능 하면 킵 해놓은 미사일들을 터트리고, 지금 들어온 미사일을 다시 킵함.

같이 터트리는 게 가능하면 도착 시간을 체크해야 됨.
서로 다른 여러 미사일을 하나의 그룹으로 묶으려면 도착 시간을 기준으로 삼아야 함.
만약에 10분, 8분, 7분, 6분에 도착하는 애들이 있음.
애들을 모두 한 번에 터트리려면 6분을 기준으로 삼아야 함.
즉, 가장 빨리 터지는 애를 기준으로 그룹화를 해야 함.
그렇기 때문에 새로 도착한 미사일과 킵 해놓은 미사일들의 도착 시간 중 가장 빠른 애로 갱신함.
*/
class Solution {
    public int solution(int[][] targets) {        
        // 정렬
        Arrays.sort(targets, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                if(o1[0] - o2[0] != 0) {
                    return o1[0] - o2[0];
                }  
                return o1[1] - o2[1];
            }
        });
        
        return interceptMissile(targets);
    }
    
    public int interceptMissile(int[][] targets) {
        int result = 0;
        int lastInTime = 0;
        int lastOutTime = 0;
        
        for(int i = 0; i < targets.length; i++) {
            int startTime = targets[i][0] * 10 +1;
            int endTime = targets[i][1] * 10 -1;
            
            // 미사일을 발사해야 하는 경우. 발사 시간이 킵 해놓은 미사일의 도착 시간보다 큼. 이 미사일을 기준으로 기준을 갱신
            if(lastOutTime < startTime) {
                lastOutTime = endTime;
                lastInTime = startTime;
                result++;
                // 이건 킵 해놓을 수 있는 미사일. 대신 도착 시간은 갱신해야 함.
            } else if(lastOutTime > endTime) {
                lastOutTime = endTime;
            }
        }
        
        return result;
    }
}


=================================================================================================================================

import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.HashMap;

/*
간단하게 요격이 가능한지 아닌지만 따지면 됨.
범위 기준에 걸치면 요격이 불가능함.
그래서 기준을 
start = * 10 +1
end = * 10 -1

그리고 end를 기준으로 우선 하나를 체크함. (이건 정렬 했기 때문에 가장 먼저 도착하는 end)
그 다음 in에서 해당 미사일이 끝나기 전까지 따져서 count++
즉, 가장 먼저 목표에 도착하는 미사일 순서를 기준으로, 해당 미사일이 도착하기 전에 같이 처리할 수 있는 애들을 처리하는 것.
*/

class Solution {
    public int solution(int[][] targets) {
        PriorityQueue<Missile> inQ = new PriorityQueue<>(new Comparator<Missile>(){
            public int compare(Missile o1, Missile o2) {
                return o1.in - o2.in;
            }
        });
        PriorityQueue<Missile> outQ = new PriorityQueue<>(new Comparator<Missile>(){
            public int compare(Missile o1, Missile o2) {
                return o1.out - o2.out;
            }
        });
        
        int id = 0;
        for(int[] target : targets) {
            target[0] = target[0] * 10 + 1;
            target[1] = target[1] * 10 - 1;
            
            inQ.add(new Missile(id, target[0], target[1]));
            outQ.add(new Missile(id, target[0], target[1]));
            id++;
        }
        
        return interceptMissile(inQ, outQ);
    }
    
    public int interceptMissile(PriorityQueue<Missile> inQ, PriorityQueue<Missile> outQ) {
        HashMap<Integer, Integer> missileIdCheckMap = new HashMap<>();
        int count = 0;
        
        while(inQ.size() > 0 || outQ.size() > 0) {
            if(outQ.size() > 0) {
                Missile end = null;
                while(outQ.size() > 0) {
                    // 이건 이미 처리된 미사일이라서 패스
                    if(missileIdCheckMap.containsKey(outQ.peek().id)) {
                        outQ.poll();     
                        // end 미사일 갱신신
                    } else {
                        end = outQ.poll();
                        missileIdCheckMap.put(end.id, 0);
                        break;
                    }
                }
                
                if(end == null) {
                    break;
                }
                
                while(inQ.size() > 0) {
                    // 이것도 이미 처리된 미사일임. 패스
                    if(missileIdCheckMap.containsKey(inQ.peek().id)) {
                        inQ.poll();
                        // 이건 현재 end 마사일 기준으로 같이 처리할 수 있는 미사일임.
                    } else if(inQ.peek().in <= end.out && inQ.peek().out >= end.out) {
                        Missile get = inQ.poll();
                        missileIdCheckMap.put(get.id, 0);
                        // 더이상 같이 처리할 수 없는 경우
                    } else {
                        break;
                    }
                }
                count++;
            }
        }
        return count;
    }
    
    class Missile {
        int id;
        int in;
        int out;
        
        public Missile(int id, int in, int out) {
            this.id = id;
            this.in = in;
            this.out = out;
        }
    }
}

=============================================================================================
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public int solution(int[][] targets) {
        int answer = 0;
        Arrays.sort(targets, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                if(o1[0] - o2[0] != 0) {
                    return o1[0] - o2[0];
                }
                return o1[1] - o2[1];
            }
         });
        
        ArrayList<Missile> cur = new ArrayList<>();
        int lastTime = Integer.MAX_VALUE;
        for(int[] target : targets) {
            int start = target[0] * 10 +1;
            int end = target[1] * 10 -1;
            
            lastTime = Math.min(end, lastTime);
            if(start > lastTime) {
                cur.clear();
                answer++;
                lastTime = end;
            }
            
            cur.add(new Missile(start, end));
        }
        
        answer = cur.size() != 0 ? answer +1 : answer;    
        return answer;
    }
    
    class Missile {
        int start;
        int end;

        public Missile(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
}

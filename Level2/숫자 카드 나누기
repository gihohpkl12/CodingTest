import java.util.Arrays;

/*
순서대로 정렬함.
A,B에 대해 최대 공약수를 구함.
(A,B,C가 있을 때,
A,B의 최대 공약수를 구함.
A,B의 최대 공약수 D와 C의 최대 공약수는 A,B,C의 최대 공약수임.)

공약수를 구하는 공식은 유클리드 공식.
A,B가 있을 때,
R = A % B. (단, A > B)
R이 0일 때까지 반복하는데, 0이 아니면
A = B, B = R을 넣음.

*/
class Solution {
    public int solution(int[] arrayA, int[] arrayB) {
        int answer = 0;
        Arrays.sort(arrayA);
        Arrays.sort(arrayB);
        
        int gcdA = arrayA.length == 1 ? arrayA[0] : findGCD(arrayA[1], arrayA[0]);
        for(int i = 2; i < arrayA.length; i++) {
            gcdA = findGCD(arrayA[i], gcdA);
        }
        
        int gcdB = arrayB.length == 1 ? arrayB[0] : findGCD(arrayB[1], arrayB[0]);
        for(int i = 2; i < arrayB.length; i++) {
            gcdB = findGCD(arrayB[i], gcdB);
        }
        
        boolean check = true;
        for(int i = 0; i < arrayA.length; i++) {
            if(arrayA[i] % gcdB == 0) {
                check = false;
                break;
            }
        }
        
        if(check) {
            answer = Math.max(gcdB, answer);
        }
        
        check = true;
        for(int i = 0; i < arrayB.length; i++) {
            if(arrayB[i] % gcdA == 0) {
                check = false;
                break;
            } 
        }
        
        if(check) {
            answer = Math.max(gcdA, answer);
        }
        
        return answer;
    }
    
    public int findGCD(int a, int b) {
        while(b != 0) {
            int division = a%b;
            a = b;
            b = division;
        }
        
        return a;
    }
}

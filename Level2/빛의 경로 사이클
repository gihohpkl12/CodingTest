import java.util.PriorityQueue;
/*
Rule
방향은 노드에서 시계방향으로 위부터 1,2,3,4로 나눔.
L은 +1만 하면 됨. 
S은 +2만 하면 됨.
R은 +3만 하면 됨.
하고 나머지 연산.

사이클에 대한 풀이
일단 visit check는 나가는 방향을 기준으로 체크하면 됨.
(어차피 나가는 방향이 맞으면 도착하는 방향은 같기 때문에 둘 다 체크할 필요가 없음.)
(덤으로 들어오는 방향이 같으면 나가는 방향도 같을 것임)

각 노드를 규칙에 따라 count++하면서 반복문을 돌음.
돌다가 만약 이전에 도착한 지점이면 break를 하고 count를 리턴함.

케이스마다 따로 visit check를 할 필요가 없음.
왜냐?
내가 특정 노드에서 어딘가로 쐈다고 할 때, 그게 이전 사이클 check와 중복됐다면 어차피 같은 사이클을 돌 것임.(가는 방향이 같으니까)
즉, 이전 케이스에서 s,r,s,r,s 이렇게 갔다고 할 때, l,s,r,s,r,s 이렇게 이전 케이스와 중복되면서 더 큰 케이스는 없음.
왜냐면 말이 안 되기 때문임.
이전 케이스를 충분히 분기하지 않은 경우가 아니라면 s,r,s,r,s도 결국 l,s,r,s,r,s 이렇게 됐을 것이기 때문임.
즉, 결국 코드 에러인 것이지 케이스 상으로는 그렇게 나올 수가 없음.
따라서 visit check는 하나의 배열을 만들어서 하면 됨.
(여기 테스트 케이스만 봐도 알 수 있음)
*/
class Solution {
    public int[] solution(String[] grid) {

        // 방문 체크
        boolean[][][] visitCheck = new boolean[grid.length][grid[0].length()][5];
        PriorityQueue<Integer> answerQ = new PriorityQueue<>();
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length(); j++) {
                for(int k = 1; k <= 4; k++) {
                   
                    // 방문한 적이 없으면 돈다.
                    if(!visitCheck[i][j][k]) {
                        answerQ.add(moveLigth(new int[] {i,j}, k, grid, visitCheck));
                    }
                }
            }
        }
        
        int index = 0;
        int[] answer = new int[answerQ.size()];
        while(answerQ.size() != 0) {
            answer[index++] = answerQ.poll();
        }
        
        return answer;
    }
    
    public int moveLigth(int[] curNode, int curDir, String[] grid, boolean[][][] visitCheck) {
        int count = 0;
        
        // 방문한 곳으로 분기하면 정지
        while(!visitCheck[curNode[0]][curNode[1]][curDir]) {
            visitCheck[curNode[0]][curNode[1]][curDir] = true;
            count++;

            // 다음 노드 계산. 시계방향으로 움직이는데, 규칙상 범위를 벗어나면 반대편 끝으로 가는 로직.
            int[] nextNode = new int[2];
            if(curDir == 1) {
                nextNode[0] = curNode[0]-1 < 0 ? grid.length-1 : curNode[0]-1;
                nextNode[1] = curNode[1];
            } else if(curDir == 2) {
                nextNode[0] = curNode[0];
                nextNode[1] = curNode[1]+1 >= grid[0].length() ? 0 : curNode[1]+1;
            } else if(curDir == 3) {
                nextNode[0] = curNode[0]+1 >= grid.length ? 0 : curNode[0]+1;
                nextNode[1] = curNode[1];
            } else {
                nextNode[0] = curNode[0];
                nextNode[1] = curNode[1]-1 < 0 ? grid[0].length()-1 : curNode[1]-1;
            }
            // curDir을 갱신해줌. 
            // 정확히 말하면 이전까지 curDir은 내가 쏘는 방향이었음.
            // 여기서 curDir은 상대방 기준임.
            // 예를 들면,
            // 0,0 위치를 기준으로 3번 방향으로 0,1에 쏘는 것을 0,1기준에서 보면 1번 방향으로 들어오는 것임.
            // 0,1 기준에서 1번 방향으로 들어오는 것을 알아야 0,1의 char에 따라 왼쪽, 오른쪽, 직진을 계산할 수 있기 때문에 3에서 1로 갱신해주는 것임.
            curDir = (curDir+2)%4 == 0 ? 4 : (curDir+2)%4;
            char nextNodeStr = grid[nextNode[0]].charAt(nextNode[1]);
            int nextDir = convertDirInputToOutput(nextNodeStr, curDir); // nextNode의 char에 따라서 어디로 쏘는지 계산함.
            
            curNode = nextNode;
            curDir = nextDir;
        }
        return count;
    }
    
    // 시계방향 기준으로 값이 들어왔을 때 왼쪽, 오른쪽, 직진을 처리하기 위함.
    public int convertDirInputToOutput(char curNodeStr, int curDir) {
        int output = 0;
        if(curNodeStr == 'L') {
            output = (1 + curDir)%4 == 0 ? 4 : (1 + curDir)%4;
        } else if(curNodeStr == 'S') {
            output = (2 + curDir)%4 == 0 ? 4 : (2 + curDir)%4;
        } else {
            output = (3 + curDir)%4 == 0 ? 4 : (3 + curDir)%4;
        }
        return output;
    }
}

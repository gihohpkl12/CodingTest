import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
class Solution {
  public int solution(int cacheSize, String[] cities) {
	      int answer = 0;
      for(int i=0; i<cities.length; i++)
	    	  cities[i] = cities[i].toLowerCase();
	      memory m = new memory(cacheSize);
	      if(cacheSize==0)
              return cities.length*5;
	      for(String name : cities)
	      {
	    	  m.decrease();
	    	  if(m.check(name))
              {
                   answer +=1;
                   m.renew(name);
              }
	    	  else
	    	  {
	    		  answer +=5;
	    		  if(m.size_check())
	    			  m.add(name);
	    		  else
	    		  {
	    			  String key = m.order();
	    			  m.remove(key);
	    			  m.add(name);
	    		  }
	    	  }
	      }
	      
	      return answer;
	  }
	 
	 class memory
	 {
		 HashMap<String, Integer> in = new HashMap<>();
		 int size;
		
		 public memory(int size)
		 {
			 this.size = size;
		 }
		 
		 public String order()
		 {
			 ArrayList<Map.Entry<String, Integer>> In = new ArrayList<>(in.entrySet());
			 Collections.sort(In, new Comparator<Map.Entry<String, Integer>>()
			 {
				 public int compare(Map.Entry<String, Integer>o1, Map.Entry<String, Integer> o2 )
				 {
					 if(o1.getValue()>o2.getValue())
						 return 1;
					 if(o1.getValue()<o2.getValue())
						 return -1;
					 return 0;
				 }
			 });
			 return In.get(0).getKey();
		 }
		 
		 public boolean size_check()
		 {
			 return this.in.size()<this.size ? true : false;
		 }
		 
		 public boolean check(String name)
		 {
			 return this.in.containsKey(name);
		 }
		 
		 public void remove(String key)
		 {
			in.remove(key);
		 }
		 
		 public void add(String name)
		 {
			 this.in.put(name,size);
		 }
		 
		 public void decrease()
		 {
			 for(String i : in.keySet())
			 {
				 this.in.replace(i, this.in.get(i)-1);
			 }
		 }
         public void renew(String name)
		 {
			 this.in.replace(name, this.size);
		 }
	 }
}
/*
투 포인트 문제.
이런 유형의 문제를 풀 때 굉장히 좋은 방식임.
그래서 좋은 문제.

일단 조건은 간단함.
포인터 두개가 있고, 하나가 먼저 움직임.
움직이는 조건은
현재 sum이 기준값보다 작다? 그럼 first가 index++ 하면서 값을 더함
현재 sum이 기준값보다 크다? 그럼 second가 indexx++ 하면서 값을 뺌.
*/

class Solution {
    public int[] solution(int[] sequence, int k) {
        int startIndex = 0, endIndex = 0;
        int minLength = Integer.MAX_VALUE;
        
        int firstPointer = -1, secondPointer = 0;
        int sum = 0;
        while(firstPointer < sequence.length && secondPointer < sequence.length) {
            // 값이 작으니까 first 오른쪽 이동 & sum +
            if(sum < k) {
                firstPointer++;
                if(firstPointer < sequence.length) {
                    sum += sequence[firstPointer];
                }
            // 값이 크니까 second 오른쪽 이동 & sum -
            } else if(sum > k) {
                sum -= sequence[secondPointer];
                secondPointer++;
            // k인 경우에 조건 따짐
            } else {
                if((firstPointer - secondPointer +1) < minLength) {
                    startIndex = secondPointer;
                    endIndex = firstPointer;
                    minLength = (firstPointer - secondPointer +1);
                }
                // 조건 따진 이후에 first가 움직여야 무한 루프 false
                firstPointer++;
                if(firstPointer < sequence.length) {
                    sum += sequence[firstPointer];
                }
            }
            
            // if(firstPointer >= sequence.length) {
            //     sum -= sequence[secondPointer];
            //     secondPointer++;
            // }
        }
        
        return new int[] {startIndex, endIndex};
    }
}

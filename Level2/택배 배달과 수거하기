import java.util.Stack;

/*
직관적인 문제.
가장 배달, 픽업 중에 가장 먼 집을 선택함.
가장 먼 집부터 출발점 순서로 배달, 픽업 숫자를 줄임.
Stack으로 안 하면 17번에서 시간초과.

배달, 픽업에 필요한 건 스택에 저장함.
*/
class Solution {
    public long solution(int cap, int n, int[] deliveries, int[] pickups) {
        Stack<int[]> delivery = new Stack<>();
        Stack<int[]> pickup = new Stack<>();
        // 배달, 픽업 스택 초기화.
        init(deliveries, pickups, delivery, pickup);
        
        return deliveryAndPickup(delivery, pickup, cap);
    }
    
    public long deliveryAndPickup(Stack<int[]> delivery, Stack<int[]> pickup, int cap) {
        long result = 0;
        
        // 배달이나 픽업이 모두 작업이 끝날 때까지 진행.
        while(delivery.size() > 0 || pickup.size() > 0) {
            // add는 가장 먼집의 주소. -1이면 방문할 집이 없는 의미.
            long add = -1;
            int capD = cap;
            int capP = cap;
            
            // 픽업 진행
            // 여기랑 아래 while문은 같은 로직임. add는 둘 중에 가장 먼 집을 말하며 max로 넣어서 맨 처음 집만 더함.
            while(capP > 0 && pickup.size() > 0) {
                int[] getPickup = pickup.pop();
                add = Math.max(add, (long)getPickup[0]);
                
                // 차에 여유가 있는 경우에는 그냥 작업량을 뺌.
                if(capP > getPickup[1]) {
                    capP -= getPickup[1];
                // 둘이 같으면 그냥 break
                } else if(capP == getPickup[1]) {
                    break;
                // 집에 작업량이 더 많으면, 작업량에 현재 차의 여유량을 빼고, stack에 남은 값을 저장함.
                } else {
                    getPickup[1] -= capP;
                    capP = 0;
                    pickup.add(getPickup);
                    break;
                }
            }
            
            while(capD > 0 && delivery.size() > 0) {
                int[] getDelivery = delivery.pop();
                add = Math.max(add, (long)getDelivery[0]);
                
                if(capD > getDelivery[1]) {
                    capD -= getDelivery[1];
                } else if(capD == getDelivery[1]) {
                    break;
                } else {
                    getDelivery[1] -= capD;
                    capD = 0;
                    delivery.add(getDelivery);
                    break;
                }
            }
            
            // 작업을 한 게 있으면 더하는데 집 번호와 인덱스 차이로 +1 해줌.
            if(add >= 0) {
                result += add +1;    
            }
        }
        
        // 왕복 고려해서 2배
        return result * 2;
    }
    
    public void init(int[] deliveries, int[] pickups, Stack<int[]> delivery, Stack<int[]> pickup) {
        for(int i = 0; i < pickups.length; i++) {
            if(pickups[i] > 0) {
                pickup.add(new int[] {i, pickups[i]});    
            }
            
            if(deliveries[i] > 0) {
                delivery.add(new int[] {i, deliveries[i]});    
            }
        }
    }
}

/*
1. 반복문으로 전체를 탐색
2. 이미 탐색한 곳인지 아닌지 체크
3. 이미 탐색한 곳이 아니고, 숫자를 만나면 dfs 탐색()
4. dfs 탐색하면서 지난 곳은 체크 - boolean[]
5. 결과 리턴
*/

import java.util.ArrayList;
import java.util.Collections;

class Solution {
    public int[] solution(String[] maps) {
        boolean[][] check = new boolean[maps.length][maps[0].length()];
        ArrayList<Integer> resultList = new ArrayList<>();
        
        for(int i = 0; i < maps.length; i++) {
            for(int j = 0; j < maps[i].length(); j++) {
                if(maps[i].charAt(j) >= '1' && maps[i].charAt(j) <= '9') {
                    if(!check[i][j]) {
                        resultList.add(dfs(i, j, maps, check));
                    }
                }
            }
        }
        
        if(resultList.size() == 0) {
            return new int[] {-1};
        }
        
        
        Collections.sort(resultList);
        return (int[])resultList.stream().mapToInt(i -> i).toArray();
    }
    
    public int dfs(int i, int j, String[] maps, boolean[][] check) {
        int[][] move = new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        check[i][j] = true;
        int result = Character.getNumericValue(maps[i].charAt(j));
        
        
        for(int[] moving : move) {
            int nextI = i + moving[0];
            int nextJ = j + moving[1];
            
            if(checkRange(nextI, nextJ, maps.length, maps[0].length()) && !check[nextI][nextJ]) {
                if(maps[nextI].charAt(nextJ) >= '0' && maps[nextI].charAt(nextJ) <= '9') {
                    check[nextI][nextJ] = true;
                    result += dfs(nextI, nextJ, maps, check);    
                }
            }
        }
        
        return result;
        
    }
    
    public boolean checkRange(int i, int j, int maxI, int maxJ) {
        if(i >= 0 && j >= 0 && i < maxI && j < maxJ) {
            return true;
        }
        return false;
    }
}

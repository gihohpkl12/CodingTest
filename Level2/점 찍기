/*
이중 반복문으로 하나씩 확인하면 시간 초과가 나옴.

이진 탐색으로 접근해야 함.

우선 가능한 좌표의 개수를 구함.
0부터 n까지 반복하면서 k를 곱해서 그 값이 d보다 작으면 가능함.

여기서 어차피 최대 값은 d임.
왜냐? 
길이를 구하려면 루트(a제곱 + b제곱)임.
어차피 루트를 빼고 계산한다면
최대가 d니까 합한 값이 d의 제곱이고, 이때 d의 제곱 + 0 외에 없음.
고로 d가 최대.

0부터 d까지 k만큼 증가한 값을 반복하면서
해당 숫자 대비 어디까지 가능한지 이진탐색을 돌리고, 해당에서 가능한 좌표를 asnwer에 더해주면 됨.
*/
import java.util.ArrayList;

class Solution {
    public long solution(int k, int d) {
        long answer = 0;
        ArrayList<Long> nums = init(k, d);
        
        for(long num : nums) {
            // 이진 탐색
            long result = binarySearch(num, d);
            if(result >= 0) {
                // 만약에 8이 나왔고, k가 3이라면
                // 8 / 3 해서 2에다가 0인 경우도 있으니까 +1 해주면 됨. (0, 3, 6)
                answer += (result / k) +1;    
            }
        }
        
        return answer;
    }
    
    // 가능한 좌표 목록 생성
    public ArrayList<Long> init(int k, int d) {
        long num = 0;
        ArrayList<Long> result = new ArrayList<>();
        while(num * k <= d) {
            result.add(num * (long)k);
            num++;
        }
        return result;
    }
    
    // 이진탐색
    public long binarySearch(long num, long d) {
        long min = 0;
        long max = d;
        long result = -1;
        int count = 0;
        while(max >= min) {
            long avr = (min + max)/2;
            
            if(Math.sqrt((num * num) + (avr * avr)) <= d) {
                result = Math.max(result, avr);
                min = avr + 1;
            } else {
                max = avr - 1;
            }
        }
        
        return result;
    }
}

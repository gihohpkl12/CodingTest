/*
배열을 돌면서 색이 칠해진 부분을 만나면
구역을 1 증가시키고, dfs로 탐색함.
탐색한 곳은 visited로 체크해서 이후에 같은 색을 중복으로 체크하지 않도록 방지.

사실 boolean[][] 안 만들고 그냥 picture로만 해도 됨.
근데 이 문제가 이상하게 picture를 수정하면 무조건 틀리게 채점함.
그래서 boolean[][]를 만들던 picture를 복사해서 만들면 됨.
*/
class Solution {
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        boolean[][] visited = new boolean[picture.length][picture[0].length];
        
        for(int i = 0; i < picture.length; i++) {
            for(int j = 0; j < picture[0].length; j++) {
                if(!visited[i][j] && picture[i][j] != 0) {
                    maxSizeOfOneArea = Math.max(maxSizeOfOneArea, check(visited, picture, i, j));
                    numberOfArea++;
                }
            }
        }

        return new int[] {numberOfArea, maxSizeOfOneArea};
    }
    
    public int check(boolean[][] visited, int[][] picture, int x, int y) {
        int result = 1;
        visited[x][y] = true;
        
        int[][] moving = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for(int[] next : moving) {
            int nextX = x + next[0];
            int nextY = y + next[1];
            
            if(rangeCheck(nextX, nextY, visited.length, visited[0].length) && 
               !visited[nextX][nextY] &&
               picture[nextX][nextY] == picture[x][y]) {
                result += check(visited, picture, nextX, nextY);
            }
        }
        return result;
    }
    
    public boolean rangeCheck(int x, int y, int endX, int endY) {
        if(x >= 0 && y >= 0 && endX > x && endY > y) {
            return true;
        }
        return false;
    }
}

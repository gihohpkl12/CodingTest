/*
완전 탐색 문제.
DP로 풀어볼까 했는데 DP로는 안 됨.
왜냐? 
우선 이게 순서마다 카운트되는 값이 다름.
그리고 DP는 이전 경우에 뽑았으면 다음 경우에 못 뽑는 등 이전 행위가 다음 행위에 직접적인 영향이 있어야 하는데
이거는 그냥 최대라서 DP로 하면 피로도가 많이 남은 케이스만 따질 것이기 때문에 카운트가 1밖에 안 됨.

dfs로 최대값 구해서 리턴하면 됨.
*/

class Solution {
    public int solution(int k, int[][] dungeons) {
        int answer = -1;
        boolean[] check = new boolean[dungeons.length];
        return dfs(check, dungeons, 0, k);
    }
    
    public int dfs(boolean[] check, int[][] dungeons, int count, int tiredness) {
        int result = count;
        
        for(int i = 0; i < dungeons.length; i++) {
            // 방문한 적이 없고, 피로도가 가능할 경우
            if(tiredness >= dungeons[i][0] && !check[i]) {
                check[i] = true;
                result = Math.max(result, dfs(check, dungeons, count+1, tiredness-dungeons[i][1]));
                check[i] = false;
            }
        }
        return result;
    }
}
